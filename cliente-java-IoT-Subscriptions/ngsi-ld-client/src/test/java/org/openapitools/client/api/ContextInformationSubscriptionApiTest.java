/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateSubscriptionRequest;
import org.openapitools.client.model.CreateSubscriptionRequest1;
import org.openapitools.client.model.OptionsSysAttrs;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuerySubscription200ResponseInner;
import org.openapitools.client.model.QuerySubscription200ResponseInner1;
import org.openapitools.client.model.Subscription;
import java.net.URI;
import org.openapitools.client.model.UpdateSubscriptionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContextInformationSubscriptionApi
 */
@Disabled
public class ContextInformationSubscriptionApiTest {

    private final ContextInformationSubscriptionApi api = new ContextInformationSubscriptionApi();

    /**
     * Create Subscription 
     *
     * 5.8.1 Create subscription.  This operation allows creating a new subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        CreateSubscriptionRequest createSubscriptionRequest = null;
        api.createSubscription(local, link, ngSILDTenant, createSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Subscription deletion by id 
     *
     * 5.8.5 Delete Subscription.  This operation allows deleting an existing subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriptionTest() throws ApiException {
        URI subscriptionId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteSubscription(subscriptionId, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Retrieve list of Subscriptions 
     *
     * 5.8.4 Query Subscriptions.  This operation allows querying existing Subscriptions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySubscriptionTest() throws ApiException {
        List<OptionsSysAttrs> options = null;
        Integer limit = null;
        Boolean count = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QuerySubscription200ResponseInner> response = api.querySubscription(options, limit, count, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Subscription retrieval by id 
     *
     * 5.8.3 Retrieve Subscription.  This operation allows retrieving an existing subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSubscriptionTest() throws ApiException {
        URI subscriptionId = null;
        List<OptionsSysAttrs> options = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        QuerySubscription200ResponseInner response = api.retrieveSubscription(subscriptionId, options, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Subscription update by id 
     *
     * 5.8.2 Update Subscription.  This operation allows updating an existing subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        URI subscriptionId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        Subscription subscription = null;
        api.updateSubscription(subscriptionId, local, link, ngSILDTenant, subscription);
        // TODO: test validations
    }

}
