/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PropertyPreviousValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NGSI-LD Property Type. The IoT device name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:11:22.919984907Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class IotName {
  /**
   * Node type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PROPERTY("Property");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type = TypeEnum.PROPERTY;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private String value;

  public static final String SERIALIZED_NAME_OBSERVED_AT = "observedAt";
  @SerializedName(SERIALIZED_NAME_OBSERVED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime observedAt;

  public static final String SERIALIZED_NAME_UNIT_CODE = "unitCode";
  @SerializedName(SERIALIZED_NAME_UNIT_CODE)
  @javax.annotation.Nullable
  private String unitCode;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  @javax.annotation.Nullable
  private URI datasetId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  @javax.annotation.Nullable
  private URI instanceId;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUE = "previousValue";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUE)
  @javax.annotation.Nullable
  private PropertyPreviousValue previousValue;

  public IotName() {
  }

  public IotName(
     URI instanceId
  ) {
    this();
    this.instanceId = instanceId;
  }

  public IotName type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Node type. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public IotName value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }


  public IotName observedAt(@javax.annotation.Nullable OffsetDateTime observedAt) {
    this.observedAt = observedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which a certain Property or Relationship became valid or was observed. For example, a temperature Value was measured by the sensor at this point in time. 
   * @return observedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservedAt() {
    return observedAt;
  }

  public void setObservedAt(@javax.annotation.Nullable OffsetDateTime observedAt) {
    this.observedAt = observedAt;
  }


  public IotName unitCode(@javax.annotation.Nullable String unitCode) {
    this.unitCode = unitCode;
    return this;
  }

  /**
   * Property Value&#39;s unit code. 
   * @return unitCode
   */
  @javax.annotation.Nullable
  public String getUnitCode() {
    return unitCode;
  }

  public void setUnitCode(@javax.annotation.Nullable String unitCode) {
    this.unitCode = unitCode;
  }


  public IotName datasetId(@javax.annotation.Nullable URI datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * It allows identifying a set or group of property values. 
   * @return datasetId
   */
  @javax.annotation.Nullable
  public URI getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(@javax.annotation.Nullable URI datasetId) {
    this.datasetId = datasetId;
  }


  public IotName createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public IotName modifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. 
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public IotName deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). 
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  /**
   * A URI uniquely identifying a Property instance, as mandated by (see clause 4.5.7). System generated. 
   * @return instanceId
   */
  @javax.annotation.Nullable
  public URI getInstanceId() {
    return instanceId;
  }



  public IotName previousValue(@javax.annotation.Nullable PropertyPreviousValue previousValue) {
    this.previousValue = previousValue;
    return this;
  }

  /**
   * Get previousValue
   * @return previousValue
   */
  @javax.annotation.Nullable
  public PropertyPreviousValue getPreviousValue() {
    return previousValue;
  }

  public void setPreviousValue(@javax.annotation.Nullable PropertyPreviousValue previousValue) {
    this.previousValue = previousValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotName iotName = (IotName) o;
    return Objects.equals(this.type, iotName.type) &&
        Objects.equals(this.value, iotName.value) &&
        Objects.equals(this.observedAt, iotName.observedAt) &&
        Objects.equals(this.unitCode, iotName.unitCode) &&
        Objects.equals(this.datasetId, iotName.datasetId) &&
        Objects.equals(this.createdAt, iotName.createdAt) &&
        Objects.equals(this.modifiedAt, iotName.modifiedAt) &&
        Objects.equals(this.deletedAt, iotName.deletedAt) &&
        Objects.equals(this.instanceId, iotName.instanceId) &&
        Objects.equals(this.previousValue, iotName.previousValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, value, observedAt, unitCode, datasetId, createdAt, modifiedAt, deletedAt, instanceId, previousValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotName {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    observedAt: ").append(toIndentedString(observedAt)).append("\n");
    sb.append("    unitCode: ").append(toIndentedString(unitCode)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    previousValue: ").append(toIndentedString(previousValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("observedAt");
    openapiFields.add("unitCode");
    openapiFields.add("datasetId");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("instanceId");
    openapiFields.add("previousValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IotName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IotName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IotName is not found in the empty JSON string", IotName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IotName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IotName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IotName.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("unitCode") != null && !jsonObj.get("unitCode").isJsonNull()) && !jsonObj.get("unitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitCode").toString()));
      }
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // validate the optional field `previousValue`
      if (jsonObj.get("previousValue") != null && !jsonObj.get("previousValue").isJsonNull()) {
        PropertyPreviousValue.validateJsonElement(jsonObj.get("previousValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IotName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IotName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IotName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IotName.class));

       return (TypeAdapter<T>) new TypeAdapter<IotName>() {
           @Override
           public void write(JsonWriter out, IotName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IotName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IotName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IotName
   * @throws IOException if the JSON string is invalid with respect to IotName
   */
  public static IotName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IotName.class);
  }

  /**
   * Convert an instance of IotName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

