/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppendAttrsTemporalRequest;
import org.openapitools.client.model.EntityTemporal;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryTemporal200ResponseInner1;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemporalContextInformationProvisionApi
 */
@Disabled
public class TemporalContextInformationProvisionApiTest {

    private final TemporalContextInformationProvisionApi api = new TemporalContextInformationProvisionApi();

    /**
     * Temporal Representation of Entity Attribute instance addition 
     *
     * 5.6.12 Add Attributes to Temporal Representation of an Entity.  This operation allows modifying a Temporal Representation of an Entity by adding new Attribute instances. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendAttrsTemporalTest() throws ApiException {
        URI entityId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        EntityTemporal entityTemporal = null;
        api.appendAttrsTemporal(entityId, local, link, ngSILDTenant, entityTemporal);
        // TODO: test validations
    }

    /**
     * Attribute Instance deletion by instance id 
     *
     * 5.6.15 Delete Attribute Instance from Temporal Representation of an Entity.  This operation allows deleting one Attribute instance (Property or Relationship), identified by its instanceId, of a Temporal Representation of an Entity. The Attribute itself and all its child elements shall be deleted. This operation enables the removal of individual Attribute instances that could have been previously added to the Temporal Representation of an Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttrInstanceTemporalTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        URI instanceId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteAttrInstanceTemporal(entityId, attrId, instanceId, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Attribute from Temporal Representation of Entity deletion 
     *
     * 5.6.13 Delete Attributes from Temporal Representation of an Entity.  This operation allows deleting an Attribute (Property or Relationship) of the Temporal Representation of an Entity. The Attribute itself and all its children shall be deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttrsTemporalTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        Boolean deleteAll = null;
        URI datasetId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteAttrsTemporal(entityId, attrId, deleteAll, datasetId, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Temporal Representation of Entity deletion by id 
     *
     * 5.6.16 Delete Temporal Representation of an Entity.  This operation allows deleting the Temporal Representation of an Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemporalTest() throws ApiException {
        URI entityId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteTemporal(entityId, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Attribute Instance update 
     *
     * 5.6.14 Partial Update Attribute instance in Temporal Representation of an Entity.  This operation allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.  This operation enables the correction of wrong information that could have been previously added to the Temporal Representation of an Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAttrsTemporalTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        URI instanceId = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        EntityTemporal entityTemporal = null;
        api.updateAttrsTemporal(entityId, attrId, instanceId, local, link, ngSILDTenant, entityTemporal);
        // TODO: test validations
    }

    /**
     * Temporal Representation of Entity creation 
     *
     * 5.6.11 Create or Update Temporal Representation of an Entity.  This operation allows creating or updating (by adding new Attribute instances) a Temporal Representation of an Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertTemporalTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        EntityTemporal entityTemporal = null;
        api.upsertTemporal(local, link, ngSILDTenant, entityTemporal);
        // TODO: test validations
    }

}
