/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchOperationResult;
import org.openapitools.client.model.Entity;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OptionsNoOverwrite;
import org.openapitools.client.model.OptionsRepresentation;
import org.openapitools.client.model.OptionsUpsert;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryEntity200ResponseInner;
import org.openapitools.client.model.QueryEntity200ResponseInner1;
import org.openapitools.client.model.ReplaceAttrsRequest;
import org.openapitools.client.model.ReplaceAttrsRequest1;
import org.openapitools.client.model.ReplaceEntityRequest;
import java.net.URI;
import org.openapitools.client.model.UpdateResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContextInformationProvisionApi
 */
@Disabled
public class ContextInformationProvisionApiTest {

    private final ContextInformationProvisionApi api = new ContextInformationProvisionApi();

    /**
     * Append Attributes to Entity 
     *
     * 5.6.3 Append Entity Attributes.  This operation allows modifying an NGSI-LD Entity by adding new attributes (Properties or Relationships). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appendAttrsTest() throws ApiException {
        URI entityId = null;
        String type = null;
        List<OptionsNoOverwrite> options = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        Entity entity = null;
        api.appendAttrs(entityId, type, options, local, link, ngSILDTenant, entity);
        // TODO: test validations
    }

    /**
     * Batch Entity Creation 
     *
     * 5.6.7 Batch Entity Creation.  This operation allows creating a batch of NGSI-LD Entities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBatchTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QueryEntity200ResponseInner> queryEntity200ResponseInner = null;
        List<String> response = api.createBatch(local, link, ngSILDTenant, queryEntity200ResponseInner);
        // TODO: test validations
    }

    /**
     * Entity creation 
     *
     * 5.6.1 Create Entity  This operation allows creating a new NGSI-LD Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEntityTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        QueryEntity200ResponseInner queryEntity200ResponseInner = null;
        api.createEntity(local, link, ngSILDTenant, queryEntity200ResponseInner);
        // TODO: test validations
    }

    /**
     * Attribute delete 
     *
     * 5.6.5 Delete Entity Attribute.  This operation allows deleting an NGSI-LD Entity&#39;s Attribute (Property or Relationship).  The Attribute itself and all its children shall be deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttrsTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        Boolean deleteAll = null;
        URI datasetId = null;
        String type = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteAttrs(entityId, attrId, deleteAll, datasetId, type, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Batch Entity Delete 
     *
     * 5.6.10 Batch Entity Delete.  This operation allows deleting a batch of NGSI-LD Entities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBatchTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<String> requestBody = null;
        api.deleteBatch(local, link, ngSILDTenant, requestBody);
        // TODO: test validations
    }

    /**
     * Entity deletion by id 
     *
     * 5.6.6 Delete entity.  This operation allows deleting an NGSI-LD Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntityTest() throws ApiException {
        URI entityId = null;
        String type = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        api.deleteEntity(entityId, type, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Batch Entity Merge 
     *
     * 5.6.20 Batch Entity Merge.  This operation allows modification of a batch of NGSI-LD Entities according to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new attributes (Properties or Relationships) or modifying or deleting existing attributes associated with an existing Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeBatchTest() throws ApiException {
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QueryEntity200ResponseInner> queryEntity200ResponseInner = null;
        api.mergeBatch(local, link, ngSILDTenant, queryEntity200ResponseInner);
        // TODO: test validations
    }

    /**
     * Entity merge by id 
     *
     * 5.6.17 Merge Entity.  This operation allows modification of an existing NGSI-LD Entity aligning to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new Attributes (Properties or Relationships) or modifying or deleting existing Attributes associated with an existing Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeEntityTest() throws ApiException {
        URI entityId = null;
        List<OptionsRepresentation> options = null;
        String type = null;
        OffsetDateTime observedAt = null;
        String lang = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        Entity entity = null;
        api.mergeEntity(entityId, options, type, observedAt, lang, local, link, ngSILDTenant, entity);
        // TODO: test validations
    }

    /**
     * Attribute replace 
     *
     * 5.6.19 Attribute Replace.  This operation allows the replacement of a single Attribute (Property or Relationship) within an NGSI-LD Entity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceAttrsTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        Boolean local = null;
        String type = null;
        URI link = null;
        String ngSILDTenant = null;
        ReplaceAttrsRequest replaceAttrsRequest = null;
        api.replaceAttrs(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest);
        // TODO: test validations
    }

    /**
     * Entity replacement by id 
     *
     * 5.6.18 Replace Entity.  This operation allows the modification of an existing NGSI-LD Entity by replacing all of the Attributes (Properties or Relationships). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceEntityTest() throws ApiException {
        URI entityId = null;
        String type = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        Entity entity = null;
        api.replaceEntity(entityId, type, local, link, ngSILDTenant, entity);
        // TODO: test validations
    }

    /**
     * Partial Attribute Update 
     *
     * 5.6.4 Partial Attribute Update.  This operation allows performing a partial update on an NGSI-LD Entity&#39;s Attribute (Property or Relationship). A partial update only changes the elements provided in an Entity Fragment, leaving the rest as they are. This operation supports the deletion of sub-Attributes but not the deletion of the whole Attribute itself. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAttrsTest() throws ApiException {
        URI entityId = null;
        URI attrId = null;
        Boolean local = null;
        String type = null;
        URI link = null;
        String ngSILDTenant = null;
        ReplaceAttrsRequest replaceAttrsRequest = null;
        api.updateAttrs(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest);
        // TODO: test validations
    }

    /**
     * Batch Entity Update 
     *
     * 5.6.9 Batch Entity Update.  This operation allows updating a batch of NGSI-LD Entities. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBatchTest() throws ApiException {
        List<OptionsNoOverwrite> options = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QueryEntity200ResponseInner> queryEntity200ResponseInner = null;
        api.updateBatch(options, local, link, ngSILDTenant, queryEntity200ResponseInner);
        // TODO: test validations
    }

    /**
     * Update Attributes of an Entity 
     *
     * 5.6.2 Update Entity Attributes.  This operation allows modifying an existing NGSI-LD Entity by updating already existing Attributes (Properties or Relationships). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntityTest() throws ApiException {
        URI entityId = null;
        Boolean local = null;
        String type = null;
        URI link = null;
        String ngSILDTenant = null;
        Entity entity = null;
        api.updateEntity(entityId, local, type, link, ngSILDTenant, entity);
        // TODO: test validations
    }

    /**
     * Batch Entity Creation or Update (Upsert) 
     *
     * 5.6.8 Batch Entity Upsert.  This operation allows creating a batch of NGSI-LD Entities, updating each of them if they already existed. In some database jargon this kind of operation is known as \&quot;upsert\&quot;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertBatchTest() throws ApiException {
        List<OptionsUpsert> options = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QueryEntity200ResponseInner> queryEntity200ResponseInner = null;
        List<String> response = api.upsertBatch(options, local, link, ngSILDTenant, queryEntity200ResponseInner);
        // TODO: test validations
    }

}
