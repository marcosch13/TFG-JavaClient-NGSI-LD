/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppendAttrsTemporalRequest;
import org.openapitools.client.model.EntityTemporal;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryTemporal200ResponseInner1;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemporalContextInformationProvisionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemporalContextInformationProvisionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemporalContextInformationProvisionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendAttrsTemporal
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were added successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appendAttrsTemporalCall(URI entityId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityTemporal;

        // create path and map variables
        String localVarPath = "/temporal/entities/{entityId}/attrs"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendAttrsTemporalValidateBeforeCall(URI entityId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling appendAttrsTemporal(Async)");
        }

        return appendAttrsTemporalCall(entityId, local, link, ngSILDTenant, entityTemporal, _callback);

    }

    /**
     * Temporal Representation of Entity Attribute instance addition 
     * 5.6.12 Add Attributes to Temporal Representation of an Entity.  This operation allows modifying a Temporal Representation of an Entity by adding new Attribute instances. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were added successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void appendAttrsTemporal(URI entityId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        appendAttrsTemporalWithHttpInfo(entityId, local, link, ngSILDTenant, entityTemporal);
    }

    /**
     * Temporal Representation of Entity Attribute instance addition 
     * 5.6.12 Add Attributes to Temporal Representation of an Entity.  This operation allows modifying a Temporal Representation of an Entity by adding new Attribute instances. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were added successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> appendAttrsTemporalWithHttpInfo(URI entityId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        okhttp3.Call localVarCall = appendAttrsTemporalValidateBeforeCall(entityId, local, link, ngSILDTenant, entityTemporal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Temporal Representation of Entity Attribute instance addition  (asynchronously)
     * 5.6.12 Add Attributes to Temporal Representation of an Entity.  This operation allows modifying a Temporal Representation of an Entity by adding new Attribute instances. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were added successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appendAttrsTemporalAsync(URI entityId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendAttrsTemporalValidateBeforeCall(entityId, local, link, ngSILDTenant, entityTemporal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttrInstanceTemporal
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute instance was delete successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrInstanceTemporalCall(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttrInstanceTemporalValidateBeforeCall(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteAttrInstanceTemporal(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling deleteAttrInstanceTemporal(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteAttrInstanceTemporal(Async)");
        }

        return deleteAttrInstanceTemporalCall(entityId, attrId, instanceId, local, link, ngSILDTenant, _callback);

    }

    /**
     * Attribute Instance deletion by instance id 
     * 5.6.15 Delete Attribute Instance from Temporal Representation of an Entity.  This operation allows deleting one Attribute instance (Property or Relationship), identified by its instanceId, of a Temporal Representation of an Entity. The Attribute itself and all its child elements shall be deleted. This operation enables the removal of individual Attribute instances that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute instance was delete successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteAttrInstanceTemporal(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteAttrInstanceTemporalWithHttpInfo(entityId, attrId, instanceId, local, link, ngSILDTenant);
    }

    /**
     * Attribute Instance deletion by instance id 
     * 5.6.15 Delete Attribute Instance from Temporal Representation of an Entity.  This operation allows deleting one Attribute instance (Property or Relationship), identified by its instanceId, of a Temporal Representation of an Entity. The Attribute itself and all its child elements shall be deleted. This operation enables the removal of individual Attribute instances that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute instance was delete successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAttrInstanceTemporalWithHttpInfo(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteAttrInstanceTemporalValidateBeforeCall(entityId, attrId, instanceId, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Attribute Instance deletion by instance id  (asynchronously)
     * 5.6.15 Delete Attribute Instance from Temporal Representation of an Entity.  This operation allows deleting one Attribute instance (Property or Relationship), identified by its instanceId, of a Temporal Representation of an Entity. The Attribute itself and all its child elements shall be deleted. This operation enables the removal of individual Attribute instances that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute instance was delete successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrInstanceTemporalAsync(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttrInstanceTemporalValidateBeforeCall(entityId, attrId, instanceId, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttrsTemporal
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrsTemporalCall(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/temporal/entities/{entityId}/attrs/{attrId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAll", deleteAll));
        }

        if (datasetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasetId", datasetId));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttrsTemporalValidateBeforeCall(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteAttrsTemporal(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling deleteAttrsTemporal(Async)");
        }

        return deleteAttrsTemporalCall(entityId, attrId, deleteAll, datasetId, local, link, ngSILDTenant, _callback);

    }

    /**
     * Attribute from Temporal Representation of Entity deletion 
     * 5.6.13 Delete Attributes from Temporal Representation of an Entity.  This operation allows deleting an Attribute (Property or Relationship) of the Temporal Representation of an Entity. The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteAttrsTemporal(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteAttrsTemporalWithHttpInfo(entityId, attrId, deleteAll, datasetId, local, link, ngSILDTenant);
    }

    /**
     * Attribute from Temporal Representation of Entity deletion 
     * 5.6.13 Delete Attributes from Temporal Representation of an Entity.  This operation allows deleting an Attribute (Property or Relationship) of the Temporal Representation of an Entity. The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAttrsTemporalWithHttpInfo(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteAttrsTemporalValidateBeforeCall(entityId, attrId, deleteAll, datasetId, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Attribute from Temporal Representation of Entity deletion  (asynchronously)
     * 5.6.13 Delete Attributes from Temporal Representation of an Entity.  This operation allows deleting an Attribute (Property or Relationship) of the Temporal Representation of an Entity. The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrsTemporalAsync(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttrsTemporalValidateBeforeCall(entityId, attrId, deleteAll, datasetId, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTemporal
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemporalCall(URI entityId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/temporal/entities/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemporalValidateBeforeCall(URI entityId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteTemporal(Async)");
        }

        return deleteTemporalCall(entityId, local, link, ngSILDTenant, _callback);

    }

    /**
     * Temporal Representation of Entity deletion by id 
     * 5.6.16 Delete Temporal Representation of an Entity.  This operation allows deleting the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteTemporal(URI entityId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteTemporalWithHttpInfo(entityId, local, link, ngSILDTenant);
    }

    /**
     * Temporal Representation of Entity deletion by id 
     * 5.6.16 Delete Temporal Representation of an Entity.  This operation allows deleting the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTemporalWithHttpInfo(URI entityId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteTemporalValidateBeforeCall(entityId, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Temporal Representation of Entity deletion by id  (asynchronously)
     * 5.6.16 Delete Temporal Representation of an Entity.  This operation allows deleting the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemporalAsync(URI entityId, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemporalValidateBeforeCall(entityId, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttrsTemporal
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttrsTemporalCall(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityTemporal;

        // create path and map variables
        String localVarPath = "/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttrsTemporalValidateBeforeCall(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateAttrsTemporal(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling updateAttrsTemporal(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateAttrsTemporal(Async)");
        }

        return updateAttrsTemporalCall(entityId, attrId, instanceId, local, link, ngSILDTenant, entityTemporal, _callback);

    }

    /**
     * Attribute Instance update 
     * 5.6.14 Partial Update Attribute instance in Temporal Representation of an Entity.  This operation allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.  This operation enables the correction of wrong information that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void updateAttrsTemporal(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        updateAttrsTemporalWithHttpInfo(entityId, attrId, instanceId, local, link, ngSILDTenant, entityTemporal);
    }

    /**
     * Attribute Instance update 
     * 5.6.14 Partial Update Attribute instance in Temporal Representation of an Entity.  This operation allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.  This operation enables the correction of wrong information that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAttrsTemporalWithHttpInfo(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        okhttp3.Call localVarCall = updateAttrsTemporalValidateBeforeCall(entityId, attrId, instanceId, local, link, ngSILDTenant, entityTemporal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Attribute Instance update  (asynchronously)
     * 5.6.14 Partial Update Attribute instance in Temporal Representation of an Entity.  This operation allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.  This operation enables the correction of wrong information that could have been previously added to the Temporal Representation of an Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param instanceId Id (URI) identifying a particular Attribute instance. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttrsTemporalAsync(URI entityId, URI attrId, URI instanceId, Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttrsTemporalValidateBeforeCall(entityId, attrId, instanceId, local, link, ngSILDTenant, entityTemporal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertTemporal
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upon creation success, the HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> Upon update success.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTemporalCall(Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityTemporal;

        // create path and map variables
        String localVarPath = "/temporal/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertTemporalValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback _callback) throws ApiException {
        return upsertTemporalCall(local, link, ngSILDTenant, entityTemporal, _callback);

    }

    /**
     * Temporal Representation of Entity creation 
     * 5.6.11 Create or Update Temporal Representation of an Entity.  This operation allows creating or updating (by adding new Attribute instances) a Temporal Representation of an Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upon creation success, the HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> Upon update success.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void upsertTemporal(Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        upsertTemporalWithHttpInfo(local, link, ngSILDTenant, entityTemporal);
    }

    /**
     * Temporal Representation of Entity creation 
     * 5.6.11 Create or Update Temporal Representation of an Entity.  This operation allows creating or updating (by adding new Attribute instances) a Temporal Representation of an Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upon creation success, the HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> Upon update success.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertTemporalWithHttpInfo(Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal) throws ApiException {
        okhttp3.Call localVarCall = upsertTemporalValidateBeforeCall(local, link, ngSILDTenant, entityTemporal, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Temporal Representation of Entity creation  (asynchronously)
     * 5.6.11 Create or Update Temporal Representation of an Entity.  This operation allows creating or updating (by adding new Attribute instances) a Temporal Representation of an Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entityTemporal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upon creation success, the HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> Upon update success.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertTemporalAsync(Boolean local, URI link, String ngSILDTenant, EntityTemporal entityTemporal, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertTemporalValidateBeforeCall(local, link, ngSILDTenant, entityTemporal, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
