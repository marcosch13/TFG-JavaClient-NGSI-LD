/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GeometryLineString;
import org.openapitools.client.model.GeometryMultiLineString;
import org.openapitools.client.model.GeometryMultiPoint;
import org.openapitools.client.model.GeometryMultiPolygon;
import org.openapitools.client.model.GeometryPoint;
import org.openapitools.client.model.GeometryPolygon;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T11:21:26.751408096Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class Geometry extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Geometry.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Geometry.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Geometry' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GeometryPoint> adapterGeometryPoint = gson.getDelegateAdapter(this, TypeToken.get(GeometryPoint.class));
            final TypeAdapter<GeometryMultiPoint> adapterGeometryMultiPoint = gson.getDelegateAdapter(this, TypeToken.get(GeometryMultiPoint.class));
            final TypeAdapter<GeometryPolygon> adapterGeometryPolygon = gson.getDelegateAdapter(this, TypeToken.get(GeometryPolygon.class));
            final TypeAdapter<GeometryLineString> adapterGeometryLineString = gson.getDelegateAdapter(this, TypeToken.get(GeometryLineString.class));
            final TypeAdapter<GeometryMultiLineString> adapterGeometryMultiLineString = gson.getDelegateAdapter(this, TypeToken.get(GeometryMultiLineString.class));
            final TypeAdapter<GeometryMultiPolygon> adapterGeometryMultiPolygon = gson.getDelegateAdapter(this, TypeToken.get(GeometryMultiPolygon.class));

            return (TypeAdapter<T>) new TypeAdapter<Geometry>() {
                @Override
                public void write(JsonWriter out, Geometry value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GeometryPoint`
                    if (value.getActualInstance() instanceof GeometryPoint) {
                        JsonElement element = adapterGeometryPoint.toJsonTree((GeometryPoint)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeometryMultiPoint`
                    if (value.getActualInstance() instanceof GeometryMultiPoint) {
                        JsonElement element = adapterGeometryMultiPoint.toJsonTree((GeometryMultiPoint)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeometryPolygon`
                    if (value.getActualInstance() instanceof GeometryPolygon) {
                        JsonElement element = adapterGeometryPolygon.toJsonTree((GeometryPolygon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeometryLineString`
                    if (value.getActualInstance() instanceof GeometryLineString) {
                        JsonElement element = adapterGeometryLineString.toJsonTree((GeometryLineString)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeometryMultiLineString`
                    if (value.getActualInstance() instanceof GeometryMultiLineString) {
                        JsonElement element = adapterGeometryMultiLineString.toJsonTree((GeometryMultiLineString)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GeometryMultiPolygon`
                    if (value.getActualInstance() instanceof GeometryMultiPolygon) {
                        JsonElement element = adapterGeometryMultiPolygon.toJsonTree((GeometryMultiPolygon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon");
                }

                @Override
                public Geometry read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GeometryPoint
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryPoint.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryPoint;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryPoint'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryPoint failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryPoint'", e);
                    }
                    // deserialize GeometryMultiPoint
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryMultiPoint.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryMultiPoint;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryMultiPoint'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryMultiPoint failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryMultiPoint'", e);
                    }
                    // deserialize GeometryPolygon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryPolygon.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryPolygon;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryPolygon'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryPolygon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryPolygon'", e);
                    }
                    // deserialize GeometryLineString
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryLineString.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryLineString;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryLineString'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryLineString failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryLineString'", e);
                    }
                    // deserialize GeometryMultiLineString
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryMultiLineString.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryMultiLineString;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryMultiLineString'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryMultiLineString failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryMultiLineString'", e);
                    }
                    // deserialize GeometryMultiPolygon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GeometryMultiPolygon.validateJsonElement(jsonElement);
                        actualAdapter = adapterGeometryMultiPolygon;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GeometryMultiPolygon'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GeometryMultiPolygon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GeometryMultiPolygon'", e);
                    }

                    if (match == 1) {
                        Geometry ret = new Geometry();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Geometry: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Geometry() {
        super("oneOf", Boolean.FALSE);
    }

    public Geometry(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GeometryPoint", GeometryPoint.class);
        schemas.put("GeometryMultiPoint", GeometryMultiPoint.class);
        schemas.put("GeometryPolygon", GeometryPolygon.class);
        schemas.put("GeometryLineString", GeometryLineString.class);
        schemas.put("GeometryMultiLineString", GeometryMultiLineString.class);
        schemas.put("GeometryMultiPolygon", GeometryMultiPolygon.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Geometry.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GeometryPoint) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeometryMultiPoint) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeometryPolygon) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeometryLineString) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeometryMultiLineString) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GeometryMultiPolygon) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon");
    }

    /**
     * Get the actual instance, which can be the following:
     * GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon
     *
     * @return The actual instance (GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryPoint`. If the actual instance is not `GeometryPoint`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryPoint`
     * @throws ClassCastException if the instance is not `GeometryPoint`
     */
    public GeometryPoint getGeometryPoint() throws ClassCastException {
        return (GeometryPoint)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryMultiPoint`. If the actual instance is not `GeometryMultiPoint`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryMultiPoint`
     * @throws ClassCastException if the instance is not `GeometryMultiPoint`
     */
    public GeometryMultiPoint getGeometryMultiPoint() throws ClassCastException {
        return (GeometryMultiPoint)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryPolygon`. If the actual instance is not `GeometryPolygon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryPolygon`
     * @throws ClassCastException if the instance is not `GeometryPolygon`
     */
    public GeometryPolygon getGeometryPolygon() throws ClassCastException {
        return (GeometryPolygon)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryLineString`. If the actual instance is not `GeometryLineString`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryLineString`
     * @throws ClassCastException if the instance is not `GeometryLineString`
     */
    public GeometryLineString getGeometryLineString() throws ClassCastException {
        return (GeometryLineString)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryMultiLineString`. If the actual instance is not `GeometryMultiLineString`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryMultiLineString`
     * @throws ClassCastException if the instance is not `GeometryMultiLineString`
     */
    public GeometryMultiLineString getGeometryMultiLineString() throws ClassCastException {
        return (GeometryMultiLineString)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GeometryMultiPolygon`. If the actual instance is not `GeometryMultiPolygon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GeometryMultiPolygon`
     * @throws ClassCastException if the instance is not `GeometryMultiPolygon`
     */
    public GeometryMultiPolygon getGeometryMultiPolygon() throws ClassCastException {
        return (GeometryMultiPolygon)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Geometry
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with GeometryPoint
        try {
            GeometryPoint.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryPoint failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeometryMultiPoint
        try {
            GeometryMultiPoint.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryMultiPoint failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeometryPolygon
        try {
            GeometryPolygon.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryPolygon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeometryLineString
        try {
            GeometryLineString.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryLineString failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeometryMultiLineString
        try {
            GeometryMultiLineString.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryMultiLineString failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GeometryMultiPolygon
        try {
            GeometryMultiPolygon.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GeometryMultiPolygon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for Geometry with oneOf schemas: GeometryLineString, GeometryMultiLineString, GeometryMultiPoint, GeometryMultiPolygon, GeometryPoint, GeometryPolygon. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Geometry given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Geometry
     * @throws IOException if the JSON string is invalid with respect to Geometry
     */
    public static Geometry fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Geometry.class);
    }

    /**
     * Convert an instance of Geometry to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

