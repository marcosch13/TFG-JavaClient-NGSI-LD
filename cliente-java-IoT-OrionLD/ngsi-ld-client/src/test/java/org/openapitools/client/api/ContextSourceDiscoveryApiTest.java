/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OptionsSysAttrs;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryCSR200ResponseInner;
import org.openapitools.client.model.QueryCSR200ResponseInner1;
import org.openapitools.client.model.QueryEntityCoordinatesParameter;
import org.openapitools.client.model.QueryEntityGeorelParameter;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContextSourceDiscoveryApi
 */
@Disabled
public class ContextSourceDiscoveryApiTest {

    private final ContextSourceDiscoveryApi api = new ContextSourceDiscoveryApi();

    /**
     * Discover Csource registrations 
     *
     * 5.10.2 Query Context Source Registrations.  This operation allows discovering context source registrations from an NGSI-LD system. The behaviour of the discovery of context source registrations differs significantly from the querying of entities as described in clause 5.7.2. The approach is that the client submits a query for entities as described in clause 5.7.2, but instead of receiving the Entity information, it receives a list of Context Source Registrations describing Context Sources that possibly have some of the requested Entity information. This means that the requested Entities and Attributes are matched against the &#39;information&#39; property as described in clause 5.12.  If no temporal query is present, only Context Source Registrations for Context Sources providing latest information, i.e. without specified time intervals, are considered. If a temporal query is present only Context Source Registrations with matching time intervals, i.e. observationInterval or managementInterval, are considered. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCSRTest() throws ApiException {
        List<URI> id = null;
        String type = null;
        String idPattern = null;
        List<String> attrs = null;
        String q = null;
        String csf = null;
        String geometry = null;
        QueryEntityGeorelParameter georel = null;
        QueryEntityCoordinatesParameter coordinates = null;
        String geoproperty = null;
        String timeproperty = null;
        String timerel = null;
        OffsetDateTime timeAt = null;
        OffsetDateTime endTimeAt = null;
        String geometryProperty = null;
        String lang = null;
        String scopeQ = null;
        List<OptionsSysAttrs> options = null;
        Integer limit = null;
        Boolean count = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        List<QueryCSR200ResponseInner> response = api.queryCSR(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, timeproperty, timerel, timeAt, endTimeAt, geometryProperty, lang, scopeQ, options, limit, count, local, link, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Csource registration retrieval by id 
     *
     * 5.10.1 Retrieve Context Source Registration.  This operation allows retrieving a specific context source registration from an NGSI-LD system. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveCSRTest() throws ApiException {
        URI registrationId = null;
        List<OptionsSysAttrs> options = null;
        Boolean local = null;
        URI link = null;
        String ngSILDTenant = null;
        QueryCSR200ResponseInner response = api.retrieveCSR(registrationId, options, local, link, ngSILDTenant);
        // TODO: test validations
    }

}
