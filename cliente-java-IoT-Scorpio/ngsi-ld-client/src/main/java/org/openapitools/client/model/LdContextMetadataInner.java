/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LdContextMetadataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:11:22.919984907Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class LdContextMetadataInner {
  public static final String SERIALIZED_NAME_U_R_L = "URL";
  @SerializedName(SERIALIZED_NAME_U_R_L)
  @javax.annotation.Nonnull
  private URI URL;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  @javax.annotation.Nonnull
  private URI localId;

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    CACHED("Cached"),
    
    HOSTED("Hosted"),
    
    IMPLICITLY_CREATED("ImplicitlyCreated");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  @javax.annotation.Nonnull
  private KindEnum kind;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nonnull
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_LAST_USAGE = "lastUsage";
  @SerializedName(SERIALIZED_NAME_LAST_USAGE)
  @javax.annotation.Nullable
  private OffsetDateTime lastUsage;

  public static final String SERIALIZED_NAME_NUMBER_OF_HITS = "numberOfHits";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_HITS)
  @javax.annotation.Nullable
  private Integer numberOfHits;

  public static final String SERIALIZED_NAME_EXTRA_INFO = "extraInfo";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFO)
  @javax.annotation.Nullable
  private Object extraInfo;

  public LdContextMetadataInner() {
  }

  public LdContextMetadataInner URL(@javax.annotation.Nonnull URI URL) {
    this.URL = URL;
    return this;
  }

  /**
   * Get URL
   * @return URL
   */
  @javax.annotation.Nonnull
  public URI getURL() {
    return URL;
  }

  public void setURL(@javax.annotation.Nonnull URI URL) {
    this.URL = URL;
  }


  public LdContextMetadataInner localId(@javax.annotation.Nonnull URI localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Get localId
   * @return localId
   */
  @javax.annotation.Nonnull
  public URI getLocalId() {
    return localId;
  }

  public void setLocalId(@javax.annotation.Nonnull URI localId) {
    this.localId = localId;
  }


  public LdContextMetadataInner kind(@javax.annotation.Nonnull KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(@javax.annotation.Nonnull KindEnum kind) {
    this.kind = kind;
  }


  public LdContextMetadataInner timestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nonnull OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public LdContextMetadataInner lastUsage(@javax.annotation.Nullable OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
    return this;
  }

  /**
   * Get lastUsage
   * @return lastUsage
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsage() {
    return lastUsage;
  }

  public void setLastUsage(@javax.annotation.Nullable OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
  }


  public LdContextMetadataInner numberOfHits(@javax.annotation.Nullable Integer numberOfHits) {
    this.numberOfHits = numberOfHits;
    return this;
  }

  /**
   * Get numberOfHits
   * @return numberOfHits
   */
  @javax.annotation.Nullable
  public Integer getNumberOfHits() {
    return numberOfHits;
  }

  public void setNumberOfHits(@javax.annotation.Nullable Integer numberOfHits) {
    this.numberOfHits = numberOfHits;
  }


  public LdContextMetadataInner extraInfo(@javax.annotation.Nullable Object extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

  /**
   * Get extraInfo
   * @return extraInfo
   */
  @javax.annotation.Nullable
  public Object getExtraInfo() {
    return extraInfo;
  }

  public void setExtraInfo(@javax.annotation.Nullable Object extraInfo) {
    this.extraInfo = extraInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LdContextMetadataInner instance itself
   */
  public LdContextMetadataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdContextMetadataInner ldContextMetadataInner = (LdContextMetadataInner) o;
    return Objects.equals(this.URL, ldContextMetadataInner.URL) &&
        Objects.equals(this.localId, ldContextMetadataInner.localId) &&
        Objects.equals(this.kind, ldContextMetadataInner.kind) &&
        Objects.equals(this.timestamp, ldContextMetadataInner.timestamp) &&
        Objects.equals(this.lastUsage, ldContextMetadataInner.lastUsage) &&
        Objects.equals(this.numberOfHits, ldContextMetadataInner.numberOfHits) &&
        Objects.equals(this.extraInfo, ldContextMetadataInner.extraInfo)&&
        Objects.equals(this.additionalProperties, ldContextMetadataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(URL, localId, kind, timestamp, lastUsage, numberOfHits, extraInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdContextMetadataInner {\n");
    sb.append("    URL: ").append(toIndentedString(URL)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    lastUsage: ").append(toIndentedString(lastUsage)).append("\n");
    sb.append("    numberOfHits: ").append(toIndentedString(numberOfHits)).append("\n");
    sb.append("    extraInfo: ").append(toIndentedString(extraInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("URL");
    openapiFields.add("localId");
    openapiFields.add("kind");
    openapiFields.add("timestamp");
    openapiFields.add("lastUsage");
    openapiFields.add("numberOfHits");
    openapiFields.add("extraInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("URL");
    openapiRequiredFields.add("localId");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LdContextMetadataInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LdContextMetadataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdContextMetadataInner is not found in the empty JSON string", LdContextMetadataInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdContextMetadataInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("URL").toString()));
      }
      if (!jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the required field `kind`
      KindEnum.validateJsonElement(jsonObj.get("kind"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdContextMetadataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdContextMetadataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdContextMetadataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdContextMetadataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LdContextMetadataInner>() {
           @Override
           public void write(JsonWriter out, LdContextMetadataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LdContextMetadataInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             LdContextMetadataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LdContextMetadataInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LdContextMetadataInner
   * @throws IOException if the JSON string is invalid with respect to LdContextMetadataInner
   */
  public static LdContextMetadataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdContextMetadataInner.class);
  }

  /**
   * Convert an instance of LdContextMetadataInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

