/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.EntityTypeInfo;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.FeatureCollection;
import org.openapitools.client.model.OptionsRepresentation;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.QueryBatchRequest;
import org.openapitools.client.model.QueryEntity200ResponseInner;
import org.openapitools.client.model.QueryEntity200ResponseInner1;
import org.openapitools.client.model.QueryEntityCoordinatesParameter;
import org.openapitools.client.model.QueryEntityGeorelParameter;
import org.openapitools.client.model.QueryEntityOptionsParameterInner;
import org.openapitools.client.model.RetrieveAttrTypes200Response;
import org.openapitools.client.model.RetrieveAttrTypes200Response1;
import org.openapitools.client.model.RetrieveAttrTypes200Response1OneOf1Inner;
import org.openapitools.client.model.RetrieveEntityTypeInfo200Response;
import org.openapitools.client.model.RetrieveEntityTypes200Response;
import org.openapitools.client.model.RetrieveEntityTypes200Response1;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContextInformationConsumptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContextInformationConsumptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContextInformationConsumptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryBatch
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param options  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param query Payload body in the request contains a JSON-LD object which represents the query to be performed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of Entities.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryBatchCall(Boolean count, Integer limit, Boolean local, List<OptionsRepresentation> options, URI link, String ngSILDTenant, Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/entityOperations/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld",
            "application/geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBatchValidateBeforeCall(Boolean count, Integer limit, Boolean local, List<OptionsRepresentation> options, URI link, String ngSILDTenant, Query query, final ApiCallback _callback) throws ApiException {
        return queryBatchCall(count, limit, local, options, link, ngSILDTenant, query, _callback);

    }

    /**
     * Query entities based on POST 
     * 5.7.2 Query Entity (batch entity queries only).  This operation allows querying an NGSI-LD system. 
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param options  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param query Payload body in the request contains a JSON-LD object which represents the query to be performed. (optional)
     * @return List&lt;QueryEntity200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of Entities.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<QueryEntity200ResponseInner> queryBatch(Boolean count, Integer limit, Boolean local, List<OptionsRepresentation> options, URI link, String ngSILDTenant, Query query) throws ApiException {
        ApiResponse<List<QueryEntity200ResponseInner>> localVarResp = queryBatchWithHttpInfo(count, limit, local, options, link, ngSILDTenant, query);
        return localVarResp.getData();
    }

    /**
     * Query entities based on POST 
     * 5.7.2 Query Entity (batch entity queries only).  This operation allows querying an NGSI-LD system. 
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param options  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param query Payload body in the request contains a JSON-LD object which represents the query to be performed. (optional)
     * @return ApiResponse&lt;List&lt;QueryEntity200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of Entities.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<QueryEntity200ResponseInner>> queryBatchWithHttpInfo(Boolean count, Integer limit, Boolean local, List<OptionsRepresentation> options, URI link, String ngSILDTenant, Query query) throws ApiException {
        okhttp3.Call localVarCall = queryBatchValidateBeforeCall(count, limit, local, options, link, ngSILDTenant, query, null);
        Type localVarReturnType = new TypeToken<List<QueryEntity200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query entities based on POST  (asynchronously)
     * 5.7.2 Query Entity (batch entity queries only).  This operation allows querying an NGSI-LD system. 
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param options  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param query Payload body in the request contains a JSON-LD object which represents the query to be performed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of Entities.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryBatchAsync(Boolean count, Integer limit, Boolean local, List<OptionsRepresentation> options, URI link, String ngSILDTenant, Query query, final ApiCallback<List<QueryEntity200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryBatchValidateBeforeCall(count, limit, local, options, link, ngSILDTenant, query, _callback);
        Type localVarReturnType = new TypeToken<List<QueryEntity200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryEntity
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of entities, unless the Accept Header indicates that the Entities are to be rendered as GeoJSON.  If the Accept Header indicates that the Entities are to be rendered as GeoJSON, a response body containing the query result as GeoJSON FeatureCollection is returned.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryEntityCall(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String geometryProperty, String lang, String scopeQ, Integer limit, Boolean count, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idPattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idPattern", idPattern));
        }

        if (attrs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "attrs", attrs));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (csf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("csf", csf));
        }

        if (geometry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometry", geometry));
        }

        if (georel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("georel", georel));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (geoproperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoproperty", geoproperty));
        }

        if (geometryProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometryProperty", geometryProperty));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (scopeQ != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopeQ", scopeQ));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld",
            "application/geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryEntityValidateBeforeCall(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String geometryProperty, String lang, String scopeQ, Integer limit, Boolean count, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        return queryEntityCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, geometryProperty, lang, scopeQ, limit, count, options, local, link, ngSILDTenant, _callback);

    }

    /**
     * Query entities 
     * 5.7.2 Query Entities (excluding batch entity queries).  This operation allows querying an NGSI-LD system. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return List&lt;QueryEntity200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of entities, unless the Accept Header indicates that the Entities are to be rendered as GeoJSON.  If the Accept Header indicates that the Entities are to be rendered as GeoJSON, a response body containing the query result as GeoJSON FeatureCollection is returned.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<QueryEntity200ResponseInner> queryEntity(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String geometryProperty, String lang, String scopeQ, Integer limit, Boolean count, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<List<QueryEntity200ResponseInner>> localVarResp = queryEntityWithHttpInfo(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, geometryProperty, lang, scopeQ, limit, count, options, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Query entities 
     * 5.7.2 Query Entities (excluding batch entity queries).  This operation allows querying an NGSI-LD system. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;List&lt;QueryEntity200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of entities, unless the Accept Header indicates that the Entities are to be rendered as GeoJSON.  If the Accept Header indicates that the Entities are to be rendered as GeoJSON, a response body containing the query result as GeoJSON FeatureCollection is returned.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<QueryEntity200ResponseInner>> queryEntityWithHttpInfo(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String geometryProperty, String lang, String scopeQ, Integer limit, Boolean count, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = queryEntityValidateBeforeCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, geometryProperty, lang, scopeQ, limit, count, options, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<List<QueryEntity200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query entities  (asynchronously)
     * 5.7.2 Query Entities (excluding batch entity queries).  This operation allows querying an NGSI-LD system. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as a list of entities, unless the Accept Header indicates that the Entities are to be rendered as GeoJSON.  If the Accept Header indicates that the Entities are to be rendered as GeoJSON, a response body containing the query result as GeoJSON FeatureCollection is returned.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryEntityAsync(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String geometryProperty, String lang, String scopeQ, Integer limit, Boolean count, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback<List<QueryEntity200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryEntityValidateBeforeCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, geometryProperty, lang, scopeQ, limit, count, options, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<List<QueryEntity200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAttrTypeInfo
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available attribute.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttrTypeInfoCall(URI attrId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{attrId}"
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAttrTypeInfoValidateBeforeCall(URI attrId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling retrieveAttrTypeInfo(Async)");
        }

        return retrieveAttrTypeInfoCall(attrId, local, link, ngSILDTenant, _callback);

    }

    /**
     * Details about available attribute 
     * 5.7.10 Retrieve Available Attribute Information.  This operation allows retrieving detailed attribute information about a specified NGSI-LD attribute that belongs to entity instances existing within the NGSI-LD system. The detailed representation includes the attribute name (as short name if available in the provided @context) and the type names for which entity instances exist that have the respective attribute, a count of available attribute instances and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available attribute.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public Attribute retrieveAttrTypeInfo(URI attrId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<Attribute> localVarResp = retrieveAttrTypeInfoWithHttpInfo(attrId, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Details about available attribute 
     * 5.7.10 Retrieve Available Attribute Information.  This operation allows retrieving detailed attribute information about a specified NGSI-LD attribute that belongs to entity instances existing within the NGSI-LD system. The detailed representation includes the attribute name (as short name if available in the provided @context) and the type names for which entity instances exist that have the respective attribute, a count of available attribute instances and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available attribute.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Attribute> retrieveAttrTypeInfoWithHttpInfo(URI attrId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveAttrTypeInfoValidateBeforeCall(attrId, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Details about available attribute  (asynchronously)
     * 5.7.10 Retrieve Available Attribute Information.  This operation allows retrieving detailed attribute information about a specified NGSI-LD attribute that belongs to entity instances existing within the NGSI-LD system. The detailed representation includes the attribute name (as short name if available in the provided @context) and the type names for which entity instances exist that have the respective attribute, a count of available attribute instances and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available attribute.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttrTypeInfoAsync(URI attrId, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Attribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAttrTypeInfoValidateBeforeCall(attrId, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAttrTypes
     * @param details If true, then detailed attribute information represented as an array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the AttributeList (clause 5.2.27) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttrTypesCall(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAttrTypesValidateBeforeCall(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        return retrieveAttrTypesCall(details, local, link, ngSILDTenant, _callback);

    }

    /**
     * Available attributes 
     * 5.7.8 Retrieve Available Attributes.  This operation allows retrieving a list of NGSI-LD attributes that belong to entity instances existing within the NGSI- LD system.  5.7.9 Retrieve Details of Available Attributes.  This operation allows retrieving a list with a detailed representation of NGSI-LD  attributes that belong to entity instances existing within the NGSI-LD system. 
     * @param details If true, then detailed attribute information represented as an array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return RetrieveAttrTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the AttributeList (clause 5.2.27) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public RetrieveAttrTypes200Response retrieveAttrTypes(Boolean details, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<RetrieveAttrTypes200Response> localVarResp = retrieveAttrTypesWithHttpInfo(details, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Available attributes 
     * 5.7.8 Retrieve Available Attributes.  This operation allows retrieving a list of NGSI-LD attributes that belong to entity instances existing within the NGSI- LD system.  5.7.9 Retrieve Details of Available Attributes.  This operation allows retrieving a list with a detailed representation of NGSI-LD  attributes that belong to entity instances existing within the NGSI-LD system. 
     * @param details If true, then detailed attribute information represented as an array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;RetrieveAttrTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the AttributeList (clause 5.2.27) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveAttrTypes200Response> retrieveAttrTypesWithHttpInfo(Boolean details, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveAttrTypesValidateBeforeCall(details, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<RetrieveAttrTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available attributes  (asynchronously)
     * 5.7.8 Retrieve Available Attributes.  This operation allows retrieving a list of NGSI-LD attributes that belong to entity instances existing within the NGSI- LD system.  5.7.9 Retrieve Details of Available Attributes.  This operation allows retrieving a list with a detailed representation of NGSI-LD  attributes that belong to entity instances existing within the NGSI-LD system. 
     * @param details If true, then detailed attribute information represented as an array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the AttributeList (clause 5.2.27) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the Attribute data structure (clause 5.2.28) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttrTypesAsync(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback<RetrieveAttrTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAttrTypesValidateBeforeCall(details, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<RetrieveAttrTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEntity
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target entity containing the selected Attributes, unless the Accept Header indicates that the Entity is to be rendered as GeoJSON.  If the Accept Header indicates that the Entity is to be rendered as GeoJSON, a GeoJSON Feature is returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityCall(URI entityId, String type, List<String> attrs, String geometryProperty, String lang, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (attrs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "attrs", attrs));
        }

        if (geometryProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometryProperty", geometryProperty));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld",
            "application/geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEntityValidateBeforeCall(URI entityId, String type, List<String> attrs, String geometryProperty, String lang, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling retrieveEntity(Async)");
        }

        return retrieveEntityCall(entityId, type, attrs, geometryProperty, lang, options, local, link, ngSILDTenant, _callback);

    }

    /**
     * Entity retrieval by id 
     * 5.7.1 Retrieve Entity.  This operation allows retrieving an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return QueryEntity200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target entity containing the selected Attributes, unless the Accept Header indicates that the Entity is to be rendered as GeoJSON.  If the Accept Header indicates that the Entity is to be rendered as GeoJSON, a GeoJSON Feature is returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public QueryEntity200ResponseInner retrieveEntity(URI entityId, String type, List<String> attrs, String geometryProperty, String lang, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<QueryEntity200ResponseInner> localVarResp = retrieveEntityWithHttpInfo(entityId, type, attrs, geometryProperty, lang, options, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Entity retrieval by id 
     * 5.7.1 Retrieve Entity.  This operation allows retrieving an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;QueryEntity200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target entity containing the selected Attributes, unless the Accept Header indicates that the Entity is to be rendered as GeoJSON.  If the Accept Header indicates that the Entity is to be rendered as GeoJSON, a GeoJSON Feature is returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<QueryEntity200ResponseInner> retrieveEntityWithHttpInfo(URI entityId, String type, List<String> attrs, String geometryProperty, String lang, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveEntityValidateBeforeCall(entityId, type, attrs, geometryProperty, lang, options, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<QueryEntity200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Entity retrieval by id  (asynchronously)
     * 5.7.1 Retrieve Entity.  This operation allows retrieving an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target entity containing the selected Attributes, unless the Accept Header indicates that the Entity is to be rendered as GeoJSON.  If the Accept Header indicates that the Entity is to be rendered as GeoJSON, a GeoJSON Feature is returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 501 </td><td> It is used by Registered Context Sources to indicate that the data format  of the request is unsupported see clause 6.3.7.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityAsync(URI entityId, String type, List<String> attrs, String geometryProperty, String lang, List<QueryEntityOptionsParameterInner> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback<QueryEntity200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEntityValidateBeforeCall(entityId, type, attrs, geometryProperty, lang, options, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<QueryEntity200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEntityTypeInfo
     * @param type Name of the entity type for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available entity type.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityTypeInfoCall(URI type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/types/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEntityTypeInfoValidateBeforeCall(URI type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling retrieveEntityTypeInfo(Async)");
        }

        return retrieveEntityTypeInfoCall(type, local, link, ngSILDTenant, _callback);

    }

    /**
     * Details about available entity type 
     * 5.7.7 Retrieve Available Entity Type information.  This operation allows retrieving detailed entity type information about a specified NGSI-LD entity type for which entity instances exist within the NGSI-LD system. The detailed representation includes the type name (as short name if available in the provided @context), the count of available entity instances and details about attributes that existing instances of this entity type have, including their name (as short name if available in the provided @context) and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param type Name of the entity type for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return EntityTypeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available entity type.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public EntityTypeInfo retrieveEntityTypeInfo(URI type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<EntityTypeInfo> localVarResp = retrieveEntityTypeInfoWithHttpInfo(type, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Details about available entity type 
     * 5.7.7 Retrieve Available Entity Type information.  This operation allows retrieving detailed entity type information about a specified NGSI-LD entity type for which entity instances exist within the NGSI-LD system. The detailed representation includes the type name (as short name if available in the provided @context), the count of available entity instances and details about attributes that existing instances of this entity type have, including their name (as short name if available in the provided @context) and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param type Name of the entity type for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;EntityTypeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available entity type.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<EntityTypeInfo> retrieveEntityTypeInfoWithHttpInfo(URI type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveEntityTypeInfoValidateBeforeCall(type, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<EntityTypeInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Details about available entity type  (asynchronously)
     * 5.7.7 Retrieve Available Entity Type information.  This operation allows retrieving detailed entity type information about a specified NGSI-LD entity type for which entity instances exist within the NGSI-LD system. The detailed representation includes the type name (as short name if available in the provided @context), the count of available entity instances and details about attributes that existing instances of this entity type have, including their name (as short name if available in the provided @context) and a list of types the attribute can have (e.g. Property, Relationship or GeoProperty). 
     * @param type Name of the entity type for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the detailed information about the available entity type.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityTypeInfoAsync(URI type, Boolean local, URI link, String ngSILDTenant, final ApiCallback<EntityTypeInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEntityTypeInfoValidateBeforeCall(type, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<EntityTypeInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEntityTypes
     * @param details If true, then detailed entity type information represented as an array with elements of the Entity Type data structure (clause 5.2.25) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the EntityTypeList (clause 5.2.24) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the EntityType data structure (clause 5.2.25) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityTypesCall(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEntityTypesValidateBeforeCall(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        return retrieveEntityTypesCall(details, local, link, ngSILDTenant, _callback);

    }

    /**
     * Retrieve available entity types  
     * 5.7.5 Retrieve Available Entity Types.  This operation allows retrieving a list of NGSI-LD entity types for which entity instances exist within the NGSI-LD system.  5.7.6  Retrieve Details of Available Entity Types.  This operation allows retrieving a list with a detailed representation of NGSI-LD entity types for which entity instances exist within the NGSI-LD system. 
     * @param details If true, then detailed entity type information represented as an array with elements of the Entity Type data structure (clause 5.2.25) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return RetrieveEntityTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the EntityTypeList (clause 5.2.24) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the EntityType data structure (clause 5.2.25) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public RetrieveEntityTypes200Response retrieveEntityTypes(Boolean details, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<RetrieveEntityTypes200Response> localVarResp = retrieveEntityTypesWithHttpInfo(details, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Retrieve available entity types  
     * 5.7.5 Retrieve Available Entity Types.  This operation allows retrieving a list of NGSI-LD entity types for which entity instances exist within the NGSI-LD system.  5.7.6  Retrieve Details of Available Entity Types.  This operation allows retrieving a list with a detailed representation of NGSI-LD entity types for which entity instances exist within the NGSI-LD system. 
     * @param details If true, then detailed entity type information represented as an array with elements of the Entity Type data structure (clause 5.2.25) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;RetrieveEntityTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the EntityTypeList (clause 5.2.24) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the EntityType data structure (clause 5.2.25) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveEntityTypes200Response> retrieveEntityTypesWithHttpInfo(Boolean details, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveEntityTypesValidateBeforeCall(details, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<RetrieveEntityTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve available entity types   (asynchronously)
     * 5.7.5 Retrieve Available Entity Types.  This operation allows retrieving a list of NGSI-LD entity types for which entity instances exist within the NGSI-LD system.  5.7.6  Retrieve Details of Available Entity Types.  This operation allows retrieving a list with a detailed representation of NGSI-LD entity types for which entity instances exist within the NGSI-LD system. 
     * @param details If true, then detailed entity type information represented as an array with elements of the Entity Type data structure (clause 5.2.25) is to be returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the EntityTypeList (clause 5.2.24) is to be returned, unless details&#x3D;true is specified.  If details&#x3D;true is specified, a response body containing a JSON-LD array with elements of the EntityType data structure (clause 5.2.25) is to be returned.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEntityTypesAsync(Boolean details, Boolean local, URI link, String ngSILDTenant, final ApiCallback<RetrieveEntityTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEntityTypesValidateBeforeCall(details, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<RetrieveEntityTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
