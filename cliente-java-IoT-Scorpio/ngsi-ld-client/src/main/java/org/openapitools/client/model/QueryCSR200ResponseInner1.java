/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CsourceRegistrationScope;
import org.openapitools.client.model.Geometry;
import org.openapitools.client.model.KeyValuePair;
import org.openapitools.client.model.LdContext;
import org.openapitools.client.model.RegistrationInfo;
import org.openapitools.client.model.RegistrationManagementInfo;
import org.openapitools.client.model.TimeInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryCSR200ResponseInner1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:11:22.919984907Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class QueryCSR200ResponseInner1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private URI id;

  /**
   * JSON-LD @type Use reserved type for identifying Context Source Registration. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CONTEXT_SOURCE_REGISTRATION("ContextSourceRegistration");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REGISTRATION_NAME = "registrationName";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NAME)
  @javax.annotation.Nullable
  private String registrationName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_INFORMATION = "information";
  @SerializedName(SERIALIZED_NAME_INFORMATION)
  @javax.annotation.Nonnull
  private List<RegistrationInfo> information = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  @javax.annotation.Nullable
  private String tenant;

  public static final String SERIALIZED_NAME_OBSERVATION_INTERVAL = "observationInterval";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_INTERVAL)
  @javax.annotation.Nullable
  private TimeInterval observationInterval;

  public static final String SERIALIZED_NAME_MANAGEMENT_INTERVAL = "managementInterval";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_INTERVAL)
  @javax.annotation.Nullable
  private TimeInterval managementInterval;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private Geometry location;

  public static final String SERIALIZED_NAME_OBSERVATION_SPACE = "observationSpace";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_SPACE)
  @javax.annotation.Nullable
  private Geometry observationSpace;

  public static final String SERIALIZED_NAME_OPERATION_SPACE = "operationSpace";
  @SerializedName(SERIALIZED_NAME_OPERATION_SPACE)
  @javax.annotation.Nullable
  private Geometry operationSpace;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nonnull
  private URI endpoint;

  public static final String SERIALIZED_NAME_CONTEXT_SOURCE_INFO = "contextSourceInfo";
  @SerializedName(SERIALIZED_NAME_CONTEXT_SOURCE_INFO)
  @javax.annotation.Nullable
  private List<KeyValuePair> contextSourceInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nullable
  private CsourceRegistrationScope scope;

  /**
   * The definition of the mode of distributed operation (see clause 4.3.6) supported by the registered Context Source. 
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    INCLUSIVE("inclusive"),
    
    EXCLUSIVE("exclusive"),
    
    REDIRECT("redirect"),
    
    AUXILIARY("auxiliary");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private ModeEnum mode = ModeEnum.INCLUSIVE;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  @javax.annotation.Nullable
  private List<String> operations = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFRESH_RATE = "refreshRate";
  @SerializedName(SERIALIZED_NAME_REFRESH_RATE)
  @javax.annotation.Nullable
  private String refreshRate;

  public static final String SERIALIZED_NAME_MANAGEMENT = "management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  @javax.annotation.Nullable
  private RegistrationManagementInfo management;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  /**
   * Read-only. Status of the Registration. It shall be \&quot;ok\&quot; if the last attempt to perform a distributed operation succeeded. It shall be \&quot;failed\&quot; if the last attempt to perform a distributed operation failed. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("ok"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIMES_SENT = "timesSent";
  @SerializedName(SERIALIZED_NAME_TIMES_SENT)
  @javax.annotation.Nullable
  private BigDecimal timesSent;

  public static final String SERIALIZED_NAME_TIMES_FAILED = "timesFailed";
  @SerializedName(SERIALIZED_NAME_TIMES_FAILED)
  @javax.annotation.Nullable
  private BigDecimal timesFailed;

  public static final String SERIALIZED_NAME_LAST_SUCCESS = "lastSuccess";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESS)
  @javax.annotation.Nullable
  private OffsetDateTime lastSuccess;

  public static final String SERIALIZED_NAME_LAST_FAILURE = "lastFailure";
  @SerializedName(SERIALIZED_NAME_LAST_FAILURE)
  @javax.annotation.Nullable
  private OffsetDateTime lastFailure;

  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  @javax.annotation.Nonnull
  private LdContext atContext;

  public QueryCSR200ResponseInner1() {
  }

  public QueryCSR200ResponseInner1(
     StatusEnum status, 
     BigDecimal timesSent, 
     BigDecimal timesFailed, 
     OffsetDateTime lastSuccess, 
     OffsetDateTime lastFailure
  ) {
    this();
    this.status = status;
    this.timesSent = timesSent;
    this.timesFailed = timesFailed;
    this.lastSuccess = lastSuccess;
    this.lastFailure = lastFailure;
  }

  public QueryCSR200ResponseInner1 id(@javax.annotation.Nonnull URI id) {
    this.id = id;
    return this;
  }

  /**
   * Unique registration identifier. (JSON-LD @id). There may be multiple registrations per Context Source, i.e. the id is unique per registration. 
   * @return id
   */
  @javax.annotation.Nonnull
  public URI getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull URI id) {
    this.id = id;
  }


  public QueryCSR200ResponseInner1 type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * JSON-LD @type Use reserved type for identifying Context Source Registration. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public QueryCSR200ResponseInner1 registrationName(@javax.annotation.Nullable String registrationName) {
    this.registrationName = registrationName;
    return this;
  }

  /**
   * A name given to this Context Source Registration. 
   * @return registrationName
   */
  @javax.annotation.Nullable
  public String getRegistrationName() {
    return registrationName;
  }

  public void setRegistrationName(@javax.annotation.Nullable String registrationName) {
    this.registrationName = registrationName;
  }


  public QueryCSR200ResponseInner1 description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of this Context Source Registration. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public QueryCSR200ResponseInner1 information(@javax.annotation.Nonnull List<RegistrationInfo> information) {
    this.information = information;
    return this;
  }

  public QueryCSR200ResponseInner1 addInformationItem(RegistrationInfo informationItem) {
    if (this.information == null) {
      this.information = new ArrayList<>();
    }
    this.information.add(informationItem);
    return this;
  }

  /**
   * Describes the Entities, Properties and Relationships for which the Context Source may be able to provide information. 
   * @return information
   */
  @javax.annotation.Nonnull
  public List<RegistrationInfo> getInformation() {
    return information;
  }

  public void setInformation(@javax.annotation.Nonnull List<RegistrationInfo> information) {
    this.information = information;
  }


  public QueryCSR200ResponseInner1 tenant(@javax.annotation.Nullable String tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Identifies the tenant that has to be specified in all requests to the Context Source that are related to the information registered in this Context Source Registration. If not present, the default tenant is assumed. Should only be present in systems supporting multi-tenancy. 
   * @return tenant
   */
  @javax.annotation.Nullable
  public String getTenant() {
    return tenant;
  }

  public void setTenant(@javax.annotation.Nullable String tenant) {
    this.tenant = tenant;
  }


  public QueryCSR200ResponseInner1 observationInterval(@javax.annotation.Nullable TimeInterval observationInterval) {
    this.observationInterval = observationInterval;
    return this;
  }

  /**
   * Get observationInterval
   * @return observationInterval
   */
  @javax.annotation.Nullable
  public TimeInterval getObservationInterval() {
    return observationInterval;
  }

  public void setObservationInterval(@javax.annotation.Nullable TimeInterval observationInterval) {
    this.observationInterval = observationInterval;
  }


  public QueryCSR200ResponseInner1 managementInterval(@javax.annotation.Nullable TimeInterval managementInterval) {
    this.managementInterval = managementInterval;
    return this;
  }

  /**
   * Get managementInterval
   * @return managementInterval
   */
  @javax.annotation.Nullable
  public TimeInterval getManagementInterval() {
    return managementInterval;
  }

  public void setManagementInterval(@javax.annotation.Nullable TimeInterval managementInterval) {
    this.managementInterval = managementInterval;
  }


  public QueryCSR200ResponseInner1 location(@javax.annotation.Nullable Geometry location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Geometry getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable Geometry location) {
    this.location = location;
  }


  public QueryCSR200ResponseInner1 observationSpace(@javax.annotation.Nullable Geometry observationSpace) {
    this.observationSpace = observationSpace;
    return this;
  }

  /**
   * Get observationSpace
   * @return observationSpace
   */
  @javax.annotation.Nullable
  public Geometry getObservationSpace() {
    return observationSpace;
  }

  public void setObservationSpace(@javax.annotation.Nullable Geometry observationSpace) {
    this.observationSpace = observationSpace;
  }


  public QueryCSR200ResponseInner1 operationSpace(@javax.annotation.Nullable Geometry operationSpace) {
    this.operationSpace = operationSpace;
    return this;
  }

  /**
   * Get operationSpace
   * @return operationSpace
   */
  @javax.annotation.Nullable
  public Geometry getOperationSpace() {
    return operationSpace;
  }

  public void setOperationSpace(@javax.annotation.Nullable Geometry operationSpace) {
    this.operationSpace = operationSpace;
  }


  public QueryCSR200ResponseInner1 expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Provides an expiration date. When passed the Context Source Registration will become invalid and the Context Source might no longer be available. 
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public QueryCSR200ResponseInner1 endpoint(@javax.annotation.Nonnull URI endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Endpoint expressed as dereferenceable URI through which the Context Source exposes its NGSI-LD interface. 
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public URI getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nonnull URI endpoint) {
    this.endpoint = endpoint;
  }


  public QueryCSR200ResponseInner1 contextSourceInfo(@javax.annotation.Nullable List<KeyValuePair> contextSourceInfo) {
    this.contextSourceInfo = contextSourceInfo;
    return this;
  }

  public QueryCSR200ResponseInner1 addContextSourceInfoItem(KeyValuePair contextSourceInfoItem) {
    if (this.contextSourceInfo == null) {
      this.contextSourceInfo = new ArrayList<>();
    }
    this.contextSourceInfo.add(contextSourceInfoItem);
    return this;
  }

  /**
   * Generic {key, value} array to convey optional information to provide when contacting the registered Context Source. 
   * @return contextSourceInfo
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getContextSourceInfo() {
    return contextSourceInfo;
  }

  public void setContextSourceInfo(@javax.annotation.Nullable List<KeyValuePair> contextSourceInfo) {
    this.contextSourceInfo = contextSourceInfo;
  }


  public QueryCSR200ResponseInner1 scope(@javax.annotation.Nullable CsourceRegistrationScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public CsourceRegistrationScope getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nullable CsourceRegistrationScope scope) {
    this.scope = scope;
  }


  public QueryCSR200ResponseInner1 mode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The definition of the mode of distributed operation (see clause 4.3.6) supported by the registered Context Source. 
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
  }


  public QueryCSR200ResponseInner1 operations(@javax.annotation.Nullable List<String> operations) {
    this.operations = operations;
    return this;
  }

  public QueryCSR200ResponseInner1 addOperationsItem(String operationsItem) {
    if (this.operations == null) {
      this.operations = new ArrayList<>();
    }
    this.operations.add(operationsItem);
    return this;
  }

  /**
   * The definition limited subset of API operations supported by the registered Context Source.  If undefined, the default set of operations is \&quot;federationOps\&quot; (see clause 4.20). 
   * @return operations
   */
  @javax.annotation.Nullable
  public List<String> getOperations() {
    return operations;
  }

  public void setOperations(@javax.annotation.Nullable List<String> operations) {
    this.operations = operations;
  }


  public QueryCSR200ResponseInner1 refreshRate(@javax.annotation.Nullable String refreshRate) {
    this.refreshRate = refreshRate;
    return this;
  }

  /**
   * An indication of the likely period of time to elapse between updates at this registered endpoint. Brokers may optionally use this information to help implement caching. 
   * @return refreshRate
   */
  @javax.annotation.Nullable
  public String getRefreshRate() {
    return refreshRate;
  }

  public void setRefreshRate(@javax.annotation.Nullable String refreshRate) {
    this.refreshRate = refreshRate;
  }


  public QueryCSR200ResponseInner1 management(@javax.annotation.Nullable RegistrationManagementInfo management) {
    this.management = management;
    return this;
  }

  /**
   * Get management
   * @return management
   */
  @javax.annotation.Nullable
  public RegistrationManagementInfo getManagement() {
    return management;
  }

  public void setManagement(@javax.annotation.Nullable RegistrationManagementInfo management) {
    this.management = management;
  }


  public QueryCSR200ResponseInner1 createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public QueryCSR200ResponseInner1 modifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. 
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public QueryCSR200ResponseInner1 deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). 
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  /**
   * Read-only. Status of the Registration. It shall be \&quot;ok\&quot; if the last attempt to perform a distributed operation succeeded. It shall be \&quot;failed\&quot; if the last attempt to perform a distributed operation failed. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Number of times that the registration triggered a distributed operation, including failed attempts. 
   * minimum: 0
   * @return timesSent
   */
  @javax.annotation.Nullable
  public BigDecimal getTimesSent() {
    return timesSent;
  }



  /**
   * Number of times that the registration triggered a distributed operation request that failed.
   * minimum: 0
   * @return timesFailed
   */
  @javax.annotation.Nullable
  public BigDecimal getTimesFailed() {
    return timesFailed;
  }



  /**
   * Timestamp corresponding to the instant when the last successfully distributed operation was sent. Created on first successful operation. 
   * @return lastSuccess
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccess() {
    return lastSuccess;
  }



  /**
   * Timestamp corresponding to the instant when the last distributed operation resulting in a failure (for instance, in the HTTP binding, an HTTP response code other than 2xx) was returned. 
   * @return lastFailure
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastFailure() {
    return lastFailure;
  }



  public QueryCSR200ResponseInner1 atContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public LdContext getAtContext() {
    return atContext;
  }

  public void setAtContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueryCSR200ResponseInner1 instance itself
   */
  public QueryCSR200ResponseInner1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryCSR200ResponseInner1 queryCSR200ResponseInner1 = (QueryCSR200ResponseInner1) o;
    return Objects.equals(this.id, queryCSR200ResponseInner1.id) &&
        Objects.equals(this.type, queryCSR200ResponseInner1.type) &&
        Objects.equals(this.registrationName, queryCSR200ResponseInner1.registrationName) &&
        Objects.equals(this.description, queryCSR200ResponseInner1.description) &&
        Objects.equals(this.information, queryCSR200ResponseInner1.information) &&
        Objects.equals(this.tenant, queryCSR200ResponseInner1.tenant) &&
        Objects.equals(this.observationInterval, queryCSR200ResponseInner1.observationInterval) &&
        Objects.equals(this.managementInterval, queryCSR200ResponseInner1.managementInterval) &&
        Objects.equals(this.location, queryCSR200ResponseInner1.location) &&
        Objects.equals(this.observationSpace, queryCSR200ResponseInner1.observationSpace) &&
        Objects.equals(this.operationSpace, queryCSR200ResponseInner1.operationSpace) &&
        Objects.equals(this.expiresAt, queryCSR200ResponseInner1.expiresAt) &&
        Objects.equals(this.endpoint, queryCSR200ResponseInner1.endpoint) &&
        Objects.equals(this.contextSourceInfo, queryCSR200ResponseInner1.contextSourceInfo) &&
        Objects.equals(this.scope, queryCSR200ResponseInner1.scope) &&
        Objects.equals(this.mode, queryCSR200ResponseInner1.mode) &&
        Objects.equals(this.operations, queryCSR200ResponseInner1.operations) &&
        Objects.equals(this.refreshRate, queryCSR200ResponseInner1.refreshRate) &&
        Objects.equals(this.management, queryCSR200ResponseInner1.management) &&
        Objects.equals(this.createdAt, queryCSR200ResponseInner1.createdAt) &&
        Objects.equals(this.modifiedAt, queryCSR200ResponseInner1.modifiedAt) &&
        Objects.equals(this.deletedAt, queryCSR200ResponseInner1.deletedAt) &&
        Objects.equals(this.status, queryCSR200ResponseInner1.status) &&
        Objects.equals(this.timesSent, queryCSR200ResponseInner1.timesSent) &&
        Objects.equals(this.timesFailed, queryCSR200ResponseInner1.timesFailed) &&
        Objects.equals(this.lastSuccess, queryCSR200ResponseInner1.lastSuccess) &&
        Objects.equals(this.lastFailure, queryCSR200ResponseInner1.lastFailure) &&
        Objects.equals(this.atContext, queryCSR200ResponseInner1.atContext)&&
        Objects.equals(this.additionalProperties, queryCSR200ResponseInner1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, registrationName, description, information, tenant, observationInterval, managementInterval, location, observationSpace, operationSpace, expiresAt, endpoint, contextSourceInfo, scope, mode, operations, refreshRate, management, createdAt, modifiedAt, deletedAt, status, timesSent, timesFailed, lastSuccess, lastFailure, atContext, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryCSR200ResponseInner1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    registrationName: ").append(toIndentedString(registrationName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    information: ").append(toIndentedString(information)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    observationInterval: ").append(toIndentedString(observationInterval)).append("\n");
    sb.append("    managementInterval: ").append(toIndentedString(managementInterval)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    observationSpace: ").append(toIndentedString(observationSpace)).append("\n");
    sb.append("    operationSpace: ").append(toIndentedString(operationSpace)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    contextSourceInfo: ").append(toIndentedString(contextSourceInfo)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    refreshRate: ").append(toIndentedString(refreshRate)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timesSent: ").append(toIndentedString(timesSent)).append("\n");
    sb.append("    timesFailed: ").append(toIndentedString(timesFailed)).append("\n");
    sb.append("    lastSuccess: ").append(toIndentedString(lastSuccess)).append("\n");
    sb.append("    lastFailure: ").append(toIndentedString(lastFailure)).append("\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("registrationName");
    openapiFields.add("description");
    openapiFields.add("information");
    openapiFields.add("tenant");
    openapiFields.add("observationInterval");
    openapiFields.add("managementInterval");
    openapiFields.add("location");
    openapiFields.add("observationSpace");
    openapiFields.add("operationSpace");
    openapiFields.add("expiresAt");
    openapiFields.add("endpoint");
    openapiFields.add("contextSourceInfo");
    openapiFields.add("scope");
    openapiFields.add("mode");
    openapiFields.add("operations");
    openapiFields.add("refreshRate");
    openapiFields.add("management");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("status");
    openapiFields.add("timesSent");
    openapiFields.add("timesFailed");
    openapiFields.add("lastSuccess");
    openapiFields.add("lastFailure");
    openapiFields.add("@context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("information");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("@context");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryCSR200ResponseInner1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryCSR200ResponseInner1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryCSR200ResponseInner1 is not found in the empty JSON string", QueryCSR200ResponseInner1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryCSR200ResponseInner1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("registrationName") != null && !jsonObj.get("registrationName").isJsonNull()) && !jsonObj.get("registrationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("information").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `information` to be an array in the JSON string but got `%s`", jsonObj.get("information").toString()));
      }

      JsonArray jsonArrayinformation = jsonObj.getAsJsonArray("information");
      // validate the required field `information` (array)
      for (int i = 0; i < jsonArrayinformation.size(); i++) {
        RegistrationInfo.validateJsonElement(jsonArrayinformation.get(i));
      };
      if ((jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) && !jsonObj.get("tenant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant").toString()));
      }
      // validate the optional field `observationInterval`
      if (jsonObj.get("observationInterval") != null && !jsonObj.get("observationInterval").isJsonNull()) {
        TimeInterval.validateJsonElement(jsonObj.get("observationInterval"));
      }
      // validate the optional field `managementInterval`
      if (jsonObj.get("managementInterval") != null && !jsonObj.get("managementInterval").isJsonNull()) {
        TimeInterval.validateJsonElement(jsonObj.get("managementInterval"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Geometry.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `observationSpace`
      if (jsonObj.get("observationSpace") != null && !jsonObj.get("observationSpace").isJsonNull()) {
        Geometry.validateJsonElement(jsonObj.get("observationSpace"));
      }
      // validate the optional field `operationSpace`
      if (jsonObj.get("operationSpace") != null && !jsonObj.get("operationSpace").isJsonNull()) {
        Geometry.validateJsonElement(jsonObj.get("operationSpace"));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if (jsonObj.get("contextSourceInfo") != null && !jsonObj.get("contextSourceInfo").isJsonNull()) {
        JsonArray jsonArraycontextSourceInfo = jsonObj.getAsJsonArray("contextSourceInfo");
        if (jsonArraycontextSourceInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contextSourceInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contextSourceInfo` to be an array in the JSON string but got `%s`", jsonObj.get("contextSourceInfo").toString()));
          }

          // validate the optional field `contextSourceInfo` (array)
          for (int i = 0; i < jsonArraycontextSourceInfo.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArraycontextSourceInfo.get(i));
          };
        }
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        CsourceRegistrationScope.validateJsonElement(jsonObj.get("scope"));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operations") != null && !jsonObj.get("operations").isJsonNull() && !jsonObj.get("operations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operations` to be an array in the JSON string but got `%s`", jsonObj.get("operations").toString()));
      }
      if ((jsonObj.get("refreshRate") != null && !jsonObj.get("refreshRate").isJsonNull()) && !jsonObj.get("refreshRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshRate").toString()));
      }
      // validate the optional field `management`
      if (jsonObj.get("management") != null && !jsonObj.get("management").isJsonNull()) {
        RegistrationManagementInfo.validateJsonElement(jsonObj.get("management"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the required field `@context`
      LdContext.validateJsonElement(jsonObj.get("@context"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryCSR200ResponseInner1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryCSR200ResponseInner1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryCSR200ResponseInner1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryCSR200ResponseInner1.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryCSR200ResponseInner1>() {
           @Override
           public void write(JsonWriter out, QueryCSR200ResponseInner1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryCSR200ResponseInner1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             QueryCSR200ResponseInner1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryCSR200ResponseInner1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryCSR200ResponseInner1
   * @throws IOException if the JSON string is invalid with respect to QueryCSR200ResponseInner1
   */
  public static QueryCSR200ResponseInner1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryCSR200ResponseInner1.class);
  }

  /**
   * Convert an instance of QueryCSR200ResponseInner1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

