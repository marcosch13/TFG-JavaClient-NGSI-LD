/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchOperationResult;
import org.openapitools.client.model.Entity;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OptionsNoOverwrite;
import org.openapitools.client.model.OptionsRepresentation;
import org.openapitools.client.model.OptionsUpsert;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryEntity200ResponseInner;
import org.openapitools.client.model.QueryEntity200ResponseInner1;
import org.openapitools.client.model.ReplaceAttrsRequest;
import org.openapitools.client.model.ReplaceAttrsRequest1;
import org.openapitools.client.model.ReplaceEntityRequest;
import java.net.URI;
import org.openapitools.client.model.UpdateResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContextInformationProvisionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContextInformationProvisionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContextInformationProvisionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendAttrs
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be added.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appendAttrsCall(URI entityId, String type, List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendAttrsValidateBeforeCall(URI entityId, String type, List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling appendAttrs(Async)");
        }

        return appendAttrsCall(entityId, type, options, local, link, ngSILDTenant, entity, _callback);

    }

    /**
     * Append Attributes to Entity 
     * 5.6.3 Append Entity Attributes.  This operation allows modifying an NGSI-LD Entity by adding new attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be added.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void appendAttrs(URI entityId, String type, List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        appendAttrsWithHttpInfo(entityId, type, options, local, link, ngSILDTenant, entity);
    }

    /**
     * Append Attributes to Entity 
     * 5.6.3 Append Entity Attributes.  This operation allows modifying an NGSI-LD Entity by adding new attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be added.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> appendAttrsWithHttpInfo(URI entityId, String type, List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        okhttp3.Call localVarCall = appendAttrsValidateBeforeCall(entityId, type, options, local, link, ngSILDTenant, entity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Append Attributes to Entity  (asynchronously)
     * 5.6.3 Append Entity Attributes.  This operation allows modifying an NGSI-LD Entity by adding new attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be added.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call appendAttrsAsync(URI entityId, String type, List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendAttrsValidateBeforeCall(entityId, type, options, local, link, ngSILDTenant, entity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBatch
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities have been successfully created, an array of Strings containing URIs is returned in the response. Each URI represents the Entity Id of a created entity. There is no restriction as to the order of the Entity Ids.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchCall(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryEntity200ResponseInner;

        // create path and map variables
        String localVarPath = "/entityOperations/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        return createBatchCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);

    }

    /**
     * Batch Entity Creation 
     * 5.6.7 Batch Entity Creation.  This operation allows creating a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities have been successfully created, an array of Strings containing URIs is returned in the response. Each URI represents the Entity Id of a created entity. There is no restriction as to the order of the Entity Ids.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<String> createBatch(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        ApiResponse<List<String>> localVarResp = createBatchWithHttpInfo(local, link, ngSILDTenant, queryEntity200ResponseInner);
        return localVarResp.getData();
    }

    /**
     * Batch Entity Creation 
     * 5.6.7 Batch Entity Creation.  This operation allows creating a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities have been successfully created, an array of Strings containing URIs is returned in the response. Each URI represents the Entity Id of a created entity. There is no restriction as to the order of the Entity Ids.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> createBatchWithHttpInfo(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = createBatchValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Entity Creation  (asynchronously)
     * 5.6.7 Batch Entity Creation.  This operation allows creating a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities have been successfully created, an array of Strings containing URIs is returned in the response. Each URI represents the Entity Id of a created entity. There is no restriction as to the order of the Entity Ids.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchAsync(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEntity
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Payload body in the request contains a JSON-LD object which represents the entity that is to be created.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * Location -  <br>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityCall(Boolean local, URI link, String ngSILDTenant, QueryEntity200ResponseInner queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryEntity200ResponseInner;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntityValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, QueryEntity200ResponseInner queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        return createEntityCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);

    }

    /**
     * Entity creation 
     * 5.6.1 Create Entity  This operation allows creating a new NGSI-LD Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Payload body in the request contains a JSON-LD object which represents the entity that is to be created.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * Location -  <br>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void createEntity(Boolean local, URI link, String ngSILDTenant, QueryEntity200ResponseInner queryEntity200ResponseInner) throws ApiException {
        createEntityWithHttpInfo(local, link, ngSILDTenant, queryEntity200ResponseInner);
    }

    /**
     * Entity creation 
     * 5.6.1 Create Entity  This operation allows creating a new NGSI-LD Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Payload body in the request contains a JSON-LD object which represents the entity that is to be created.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * Location -  <br>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> createEntityWithHttpInfo(Boolean local, URI link, String ngSILDTenant, QueryEntity200ResponseInner queryEntity200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = createEntityValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity creation  (asynchronously)
     * 5.6.1 Create Entity  This operation allows creating a new NGSI-LD Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Payload body in the request contains a JSON-LD object which represents the entity that is to be created.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created entity resource.  </td><td>  * Location -  <br>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 422 </td><td> It is used to indicate that the operation is not available, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityAsync(Boolean local, URI link, String ngSILDTenant, QueryEntity200ResponseInner queryEntity200ResponseInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntityValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttrs
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrsCall(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs/{attrId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAll", deleteAll));
        }

        if (datasetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasetId", datasetId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttrsValidateBeforeCall(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteAttrs(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling deleteAttrs(Async)");
        }

        return deleteAttrsCall(entityId, attrId, deleteAll, datasetId, type, local, link, ngSILDTenant, _callback);

    }

    /**
     * Attribute delete 
     * 5.6.5 Delete Entity Attribute.  This operation allows deleting an NGSI-LD Entity&#39;s Attribute (Property or Relationship).  The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteAttrs(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, String type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteAttrsWithHttpInfo(entityId, attrId, deleteAll, datasetId, type, local, link, ngSILDTenant);
    }

    /**
     * Attribute delete 
     * 5.6.5 Delete Entity Attribute.  This operation allows deleting an NGSI-LD Entity&#39;s Attribute (Property or Relationship).  The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAttrsWithHttpInfo(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, String type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteAttrsValidateBeforeCall(entityId, attrId, deleteAll, datasetId, type, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Attribute delete  (asynchronously)
     * 5.6.5 Delete Entity Attribute.  This operation allows deleting an NGSI-LD Entity&#39;s Attribute (Property or Relationship).  The Attribute itself and all its children shall be deleted. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param deleteAll If true, all attribute instances are deleted. Otherwise (default) only the Attribute instance specified by the datasetId is deleted. In case neither the deleteAll flag nor a datasetId is present, the default Attribute instance is deleted.  (optional)
     * @param datasetId Specifies the datasetId of the dataset to be deleted.  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttrsAsync(URI entityId, URI attrId, Boolean deleteAll, URI datasetId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttrsValidateBeforeCall(entityId, attrId, deleteAll, datasetId, type, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBatch
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param requestBody Array of String (URIs representing Entity IDs) to be deleted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities existed and have been successfully deleted, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBatchCall(Boolean local, URI link, String ngSILDTenant, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/entityOperations/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBatchValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        return deleteBatchCall(local, link, ngSILDTenant, requestBody, _callback);

    }

    /**
     * Batch Entity Delete 
     * 5.6.10 Batch Entity Delete.  This operation allows deleting a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param requestBody Array of String (URIs representing Entity IDs) to be deleted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities existed and have been successfully deleted, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteBatch(Boolean local, URI link, String ngSILDTenant, List<String> requestBody) throws ApiException {
        deleteBatchWithHttpInfo(local, link, ngSILDTenant, requestBody);
    }

    /**
     * Batch Entity Delete 
     * 5.6.10 Batch Entity Delete.  This operation allows deleting a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param requestBody Array of String (URIs representing Entity IDs) to be deleted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities existed and have been successfully deleted, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBatchWithHttpInfo(Boolean local, URI link, String ngSILDTenant, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteBatchValidateBeforeCall(local, link, ngSILDTenant, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch Entity Delete  (asynchronously)
     * 5.6.10 Batch Entity Delete.  This operation allows deleting a batch of NGSI-LD Entities. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param requestBody Array of String (URIs representing Entity IDs) to be deleted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities existed and have been successfully deleted, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBatchAsync(Boolean local, URI link, String ngSILDTenant, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBatchValidateBeforeCall(local, link, ngSILDTenant, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEntity
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityCall(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntityValidateBeforeCall(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteEntity(Async)");
        }

        return deleteEntityCall(entityId, type, local, link, ngSILDTenant, _callback);

    }

    /**
     * Entity deletion by id 
     * 5.6.6 Delete entity.  This operation allows deleting an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteEntity(URI entityId, String type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteEntityWithHttpInfo(entityId, type, local, link, ngSILDTenant);
    }

    /**
     * Entity deletion by id 
     * 5.6.6 Delete entity.  This operation allows deleting an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEntityWithHttpInfo(URI entityId, String type, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(entityId, type, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity deletion by id  (asynchronously)
     * 5.6.6 Delete entity.  This operation allows deleting an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityAsync(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(entityId, type, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeBatch
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of Entities to be merged.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully merged, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBatchCall(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryEntity200ResponseInner;

        // create path and map variables
        String localVarPath = "/entityOperations/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeBatchValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        return mergeBatchCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);

    }

    /**
     * Batch Entity Merge 
     * 5.6.20 Batch Entity Merge.  This operation allows modification of a batch of NGSI-LD Entities according to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new attributes (Properties or Relationships) or modifying or deleting existing attributes associated with an existing Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of Entities to be merged.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully merged, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void mergeBatch(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        mergeBatchWithHttpInfo(local, link, ngSILDTenant, queryEntity200ResponseInner);
    }

    /**
     * Batch Entity Merge 
     * 5.6.20 Batch Entity Merge.  This operation allows modification of a batch of NGSI-LD Entities according to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new attributes (Properties or Relationships) or modifying or deleting existing attributes associated with an existing Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of Entities to be merged.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully merged, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> mergeBatchWithHttpInfo(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = mergeBatchValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch Entity Merge  (asynchronously)
     * 5.6.20 Batch Entity Merge.  This operation allows modification of a batch of NGSI-LD Entities according to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new attributes (Properties or Relationships) or modifying or deleting existing attributes associated with an existing Entity. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of Entities to be merged.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully merged, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call mergeBatchAsync(Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeBatchValidateBeforeCall(local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeEntity
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param options  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param observedAt When a merge operation applies to a pre-existing Attribute which previously contained an \&quot;observedAt\&quot; sub-attribute, the value held in this query parameter shall be used if no specific \&quot;observedAt\&quot; sub-Attribute is found in the payload body.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be merged.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were merged successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call mergeEntityCall(URI entityId, List<OptionsRepresentation> options, String type, OffsetDateTime observedAt, String lang, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (observedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("observedAt", observedAt));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeEntityValidateBeforeCall(URI entityId, List<OptionsRepresentation> options, String type, OffsetDateTime observedAt, String lang, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling mergeEntity(Async)");
        }

        return mergeEntityCall(entityId, options, type, observedAt, lang, local, link, ngSILDTenant, entity, _callback);

    }

    /**
     * Entity merge by id 
     * 5.6.17 Merge Entity.  This operation allows modification of an existing NGSI-LD Entity aligning to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new Attributes (Properties or Relationships) or modifying or deleting existing Attributes associated with an existing Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param options  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param observedAt When a merge operation applies to a pre-existing Attribute which previously contained an \&quot;observedAt\&quot; sub-attribute, the value held in this query parameter shall be used if no specific \&quot;observedAt\&quot; sub-Attribute is found in the payload body.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be merged.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were merged successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void mergeEntity(URI entityId, List<OptionsRepresentation> options, String type, OffsetDateTime observedAt, String lang, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        mergeEntityWithHttpInfo(entityId, options, type, observedAt, lang, local, link, ngSILDTenant, entity);
    }

    /**
     * Entity merge by id 
     * 5.6.17 Merge Entity.  This operation allows modification of an existing NGSI-LD Entity aligning to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new Attributes (Properties or Relationships) or modifying or deleting existing Attributes associated with an existing Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param options  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param observedAt When a merge operation applies to a pre-existing Attribute which previously contained an \&quot;observedAt\&quot; sub-attribute, the value held in this query parameter shall be used if no specific \&quot;observedAt\&quot; sub-Attribute is found in the payload body.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be merged.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were merged successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> mergeEntityWithHttpInfo(URI entityId, List<OptionsRepresentation> options, String type, OffsetDateTime observedAt, String lang, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        okhttp3.Call localVarCall = mergeEntityValidateBeforeCall(entityId, options, type, observedAt, lang, local, link, ngSILDTenant, entity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity merge by id  (asynchronously)
     * 5.6.17 Merge Entity.  This operation allows modification of an existing NGSI-LD Entity aligning to the JSON Merge Patch processing rules defined in IETF RFC 7396 by adding new Attributes (Properties or Relationships) or modifying or deleting existing Attributes associated with an existing Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param options  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param observedAt When a merge operation applies to a pre-existing Attribute which previously contained an \&quot;observedAt\&quot; sub-attribute, the value held in this query parameter shall be used if no specific \&quot;observedAt\&quot; sub-Attribute is found in the payload body.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be merged.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were merged successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call mergeEntityAsync(URI entityId, List<OptionsRepresentation> options, String type, OffsetDateTime observedAt, String lang, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeEntityValidateBeforeCall(entityId, options, type, observedAt, lang, local, link, ngSILDTenant, entity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceAttrs
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAttrsCall(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceAttrsRequest;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs/{attrId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceAttrsValidateBeforeCall(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling replaceAttrs(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling replaceAttrs(Async)");
        }

        return replaceAttrsCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, _callback);

    }

    /**
     * Attribute replace 
     * 5.6.19 Attribute Replace.  This operation allows the replacement of a single Attribute (Property or Relationship) within an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void replaceAttrs(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest) throws ApiException {
        replaceAttrsWithHttpInfo(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest);
    }

    /**
     * Attribute replace 
     * 5.6.19 Attribute Replace.  This operation allows the replacement of a single Attribute (Property or Relationship) within an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceAttrsWithHttpInfo(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceAttrsValidateBeforeCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Attribute replace  (asynchronously)
     * 5.6.19 Attribute Replace.  This operation allows the replacement of a single Attribute (Property or Relationship) within an NGSI-LD Entity. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAttrsAsync(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceAttrsValidateBeforeCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceEntity
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Entity to be replaced.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The entity was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceEntityCall(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceEntityValidateBeforeCall(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling replaceEntity(Async)");
        }

        return replaceEntityCall(entityId, type, local, link, ngSILDTenant, entity, _callback);

    }

    /**
     * Entity replacement by id 
     * 5.6.18 Replace Entity.  This operation allows the modification of an existing NGSI-LD Entity by replacing all of the Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Entity to be replaced.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The entity was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void replaceEntity(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        replaceEntityWithHttpInfo(entityId, type, local, link, ngSILDTenant, entity);
    }

    /**
     * Entity replacement by id 
     * 5.6.18 Replace Entity.  This operation allows the modification of an existing NGSI-LD Entity by replacing all of the Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Entity to be replaced.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The entity was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceEntityWithHttpInfo(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        okhttp3.Call localVarCall = replaceEntityValidateBeforeCall(entityId, type, local, link, ngSILDTenant, entity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Entity replacement by id  (asynchronously)
     * 5.6.18 Replace Entity.  This operation allows the modification of an existing NGSI-LD Entity by replacing all of the Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Entity to be replaced.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The entity was replaced successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceEntityAsync(URI entityId, String type, Boolean local, URI link, String ngSILDTenant, Entity entity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceEntityValidateBeforeCall(entityId, type, local, link, ngSILDTenant, entity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttrs
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttrsCall(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceAttrsRequest;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs/{attrId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "attrId" + "}", localVarApiClient.escapeString(attrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttrsValidateBeforeCall(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateAttrs(Async)");
        }

        // verify the required parameter 'attrId' is set
        if (attrId == null) {
            throw new ApiException("Missing the required parameter 'attrId' when calling updateAttrs(Async)");
        }

        return updateAttrsCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, _callback);

    }

    /**
     * Partial Attribute Update 
     * 5.6.4 Partial Attribute Update.  This operation allows performing a partial update on an NGSI-LD Entity&#39;s Attribute (Property or Relationship). A partial update only changes the elements provided in an Entity Fragment, leaving the rest as they are. This operation supports the deletion of sub-Attributes but not the deletion of the whole Attribute itself. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void updateAttrs(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest) throws ApiException {
        updateAttrsWithHttpInfo(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest);
    }

    /**
     * Partial Attribute Update 
     * 5.6.4 Partial Attribute Update.  This operation allows performing a partial update on an NGSI-LD Entity&#39;s Attribute (Property or Relationship). A partial update only changes the elements provided in an Entity Fragment, leaving the rest as they are. This operation supports the deletion of sub-Attributes but not the deletion of the whole Attribute itself. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAttrsWithHttpInfo(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttrsValidateBeforeCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Partial Attribute Update  (asynchronously)
     * 5.6.4 Partial Attribute Update.  This operation allows performing a partial update on an NGSI-LD Entity&#39;s Attribute (Property or Relationship). A partial update only changes the elements provided in an Entity Fragment, leaving the rest as they are. This operation supports the deletion of sub-Attributes but not the deletion of the whole Attribute itself. 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param attrId Name of the attribute for which detailed information is to be retrieved. The Fully Qualified Name (FQN) as well as the short name can be used, given that the latter is part of the JSON-LD @context provided.  (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param replaceAttrsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttrsAsync(URI entityId, URI attrId, Boolean local, String type, URI link, String ngSILDTenant, ReplaceAttrsRequest replaceAttrsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttrsValidateBeforeCall(entityId, attrId, local, type, link, ngSILDTenant, replaceAttrsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBatch
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be updated.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully updated, there is no payload body in the response.   </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateBatchCall(List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryEntity200ResponseInner;

        // create path and map variables
        String localVarPath = "/entityOperations/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBatchValidateBeforeCall(List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        return updateBatchCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);

    }

    /**
     * Batch Entity Update 
     * 5.6.9 Batch Entity Update.  This operation allows updating a batch of NGSI-LD Entities. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be updated.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully updated, there is no payload body in the response.   </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void updateBatch(List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        updateBatchWithHttpInfo(options, local, link, ngSILDTenant, queryEntity200ResponseInner);
    }

    /**
     * Batch Entity Update 
     * 5.6.9 Batch Entity Update.  This operation allows updating a batch of NGSI-LD Entities. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be updated.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully updated, there is no payload body in the response.   </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBatchWithHttpInfo(List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = updateBatchValidateBeforeCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch Entity Update  (asynchronously)
     * 5.6.9 Batch Entity Update.  This operation allows updating a batch of NGSI-LD Entities. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be updated.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If all entities have been successfully updated, there is no payload body in the response.   </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateBatchAsync(List<OptionsNoOverwrite> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBatchValidateBeforeCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEntity
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be updated.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateEntityCall(URI entityId, Boolean local, String type, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntityValidateBeforeCall(URI entityId, Boolean local, String type, URI link, String ngSILDTenant, Entity entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateEntity(Async)");
        }

        return updateEntityCall(entityId, local, type, link, ngSILDTenant, entity, _callback);

    }

    /**
     * Update Attributes of an Entity 
     * 5.6.2 Update Entity Attributes.  This operation allows modifying an existing NGSI-LD Entity by updating already existing Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be updated.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void updateEntity(URI entityId, Boolean local, String type, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        updateEntityWithHttpInfo(entityId, local, type, link, ngSILDTenant, entity);
    }

    /**
     * Update Attributes of an Entity 
     * 5.6.2 Update Entity Attributes.  This operation allows modifying an existing NGSI-LD Entity by updating already existing Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be updated.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateEntityWithHttpInfo(URI entityId, Boolean local, String type, URI link, String ngSILDTenant, Entity entity) throws ApiException {
        okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityId, local, type, link, ngSILDTenant, entity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Attributes of an Entity  (asynchronously)
     * 5.6.2 Update Entity Attributes.  This operation allows modifying an existing NGSI-LD Entity by updating already existing Attributes (Properties or Relationships). 
     * @param entityId Id (URI) of the entity to be retrieved. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param entity Entity Fragment containing a complete representation of the Attributes to be updated.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All the Attributes were appended successfully.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> Only the Attributes included in the response payload body were successfully appended. If no Attributes were successfully updated the updated array of UpdateResult (see clause 5.2.18) will be empty.  If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation.  In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a UpdateResult structure.  Names of the Attributes included in the UpdateResult structure are represented as Fully Qualified Names as per clause 6.3.6.  Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateEntityAsync(URI entityId, Boolean local, String type, URI link, String ngSILDTenant, Entity entity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityId, local, type, link, ngSILDTenant, entity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertBatch
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities not existing prior to this request have been successfully created and the others have been successfully updated, an array of String (with the URIs representing the Entity Ids of the created entities only) is returned in the response. There is no restriction as to the order of the Entity Ids. The merely updated entities do not take part in the response (corresponding to 204 No Content returned in the case of updates).  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 204 </td><td> If all entities already existed and are successfully updated, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertBatchCall(List<OptionsUpsert> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryEntity200ResponseInner;

        // create path and map variables
        String localVarPath = "/entityOperations/upsert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertBatchValidateBeforeCall(List<OptionsUpsert> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback _callback) throws ApiException {
        return upsertBatchCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);

    }

    /**
     * Batch Entity Creation or Update (Upsert) 
     * 5.6.8 Batch Entity Upsert.  This operation allows creating a batch of NGSI-LD Entities, updating each of them if they already existed. In some database jargon this kind of operation is known as \&quot;upsert\&quot;. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities not existing prior to this request have been successfully created and the others have been successfully updated, an array of String (with the URIs representing the Entity Ids of the created entities only) is returned in the response. There is no restriction as to the order of the Entity Ids. The merely updated entities do not take part in the response (corresponding to 204 No Content returned in the case of updates).  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 204 </td><td> If all entities already existed and are successfully updated, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<String> upsertBatch(List<OptionsUpsert> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        ApiResponse<List<String>> localVarResp = upsertBatchWithHttpInfo(options, local, link, ngSILDTenant, queryEntity200ResponseInner);
        return localVarResp.getData();
    }

    /**
     * Batch Entity Creation or Update (Upsert) 
     * 5.6.8 Batch Entity Upsert.  This operation allows creating a batch of NGSI-LD Entities, updating each of them if they already existed. In some database jargon this kind of operation is known as \&quot;upsert\&quot;. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities not existing prior to this request have been successfully created and the others have been successfully updated, an array of String (with the URIs representing the Entity Ids of the created entities only) is returned in the response. There is no restriction as to the order of the Entity Ids. The merely updated entities do not take part in the response (corresponding to 204 No Content returned in the case of updates).  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 204 </td><td> If all entities already existed and are successfully updated, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> upsertBatchWithHttpInfo(List<OptionsUpsert> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = upsertBatchValidateBeforeCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Entity Creation or Update (Upsert)  (asynchronously)
     * 5.6.8 Batch Entity Upsert.  This operation allows creating a batch of NGSI-LD Entities, updating each of them if they already existed. In some database jargon this kind of operation is known as \&quot;upsert\&quot;. 
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param queryEntity200ResponseInner Array of entities to be created.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> If all entities not existing prior to this request have been successfully created and the others have been successfully updated, an array of String (with the URIs representing the Entity Ids of the created entities only) is returned in the response. There is no restriction as to the order of the Entity Ids. The merely updated entities do not take part in the response (corresponding to 204 No Content returned in the case of updates).  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 204 </td><td> If all entities already existed and are successfully updated, there is no payload body in the response.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 207 </td><td> If the entity input data matches to a registration, the relevant parts of the request are forwarded as a distributed operation. In the case when an error response is received back from any distributed operation, a response body containing the result returned from each registration is returned in a BatchOperationResult structure. Errors can occur whenever a distributed operation is unsupported, fails or times out, see clause 6.3.17.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call upsertBatchAsync(List<OptionsUpsert> options, Boolean local, URI link, String ngSILDTenant, List<QueryEntity200ResponseInner> queryEntity200ResponseInner, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertBatchValidateBeforeCall(options, local, link, ngSILDTenant, queryEntity200ResponseInner, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
