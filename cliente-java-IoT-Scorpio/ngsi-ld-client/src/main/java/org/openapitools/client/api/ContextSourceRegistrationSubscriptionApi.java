/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateSubscriptionRequest;
import org.openapitools.client.model.CreateSubscriptionRequest1;
import org.openapitools.client.model.OptionsSysAttrs;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QuerySubscription200ResponseInner;
import org.openapitools.client.model.QuerySubscription200ResponseInner1;
import org.openapitools.client.model.Subscription;
import java.net.URI;
import org.openapitools.client.model.UpdateSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContextSourceRegistrationSubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContextSourceRegistrationSubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContextSourceRegistrationSubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCSRSubscription
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param createSubscriptionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created context source registration subscription resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCSRSubscriptionCall(Boolean local, URI link, String ngSILDTenant, CreateSubscriptionRequest createSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/csourceSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCSRSubscriptionValidateBeforeCall(Boolean local, URI link, String ngSILDTenant, CreateSubscriptionRequest createSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        return createCSRSubscriptionCall(local, link, ngSILDTenant, createSubscriptionRequest, _callback);

    }

    /**
     * Create subscription to Csource registration 
     * 5.11.2 Create Context Source Registration Subscription.  This operation allows creating a new Context Source Registration Subscription. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param createSubscriptionRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created context source registration subscription resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
     </table>
     */
    public void createCSRSubscription(Boolean local, URI link, String ngSILDTenant, CreateSubscriptionRequest createSubscriptionRequest) throws ApiException {
        createCSRSubscriptionWithHttpInfo(local, link, ngSILDTenant, createSubscriptionRequest);
    }

    /**
     * Create subscription to Csource registration 
     * 5.11.2 Create Context Source Registration Subscription.  This operation allows creating a new Context Source Registration Subscription. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param createSubscriptionRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created context source registration subscription resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> createCSRSubscriptionWithHttpInfo(Boolean local, URI link, String ngSILDTenant, CreateSubscriptionRequest createSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createCSRSubscriptionValidateBeforeCall(local, link, ngSILDTenant, createSubscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create subscription to Csource registration  (asynchronously)
     * 5.11.2 Create Context Source Registration Subscription.  This operation allows creating a new Context Source Registration Subscription. 
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param createSubscriptionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HTTP response shall include a \&quot;Location\&quot; HTTP header that contains the resource URI of the created context source registration subscription resource.  </td><td>  * NGSILD-Tenant -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 409 </td><td> It is used to indicate that the entity or an exclusive or redirect registration defining the entity already exists, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCSRSubscriptionAsync(Boolean local, URI link, String ngSILDTenant, CreateSubscriptionRequest createSubscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCSRSubscriptionValidateBeforeCall(local, link, ngSILDTenant, createSubscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCSRSubscription
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCSRSubscriptionCall(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/csourceSubscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCSRSubscriptionValidateBeforeCall(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteCSRSubscription(Async)");
        }

        return deleteCSRSubscriptionCall(subscriptionId, local, link, ngSILDTenant, _callback);

    }

    /**
     * Csource registration subscription deletion by id 
     * 5.11.6 Delete Context Source Registration Subscription.  This operation allows deleting an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void deleteCSRSubscription(URI subscriptionId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        deleteCSRSubscriptionWithHttpInfo(subscriptionId, local, link, ngSILDTenant);
    }

    /**
     * Csource registration subscription deletion by id 
     * 5.11.6 Delete Context Source Registration Subscription.  This operation allows deleting an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCSRSubscriptionWithHttpInfo(URI subscriptionId, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteCSRSubscriptionValidateBeforeCall(subscriptionId, local, link, ngSILDTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Csource registration subscription deletion by id  (asynchronously)
     * 5.11.6 Delete Context Source Registration Subscription.  This operation allows deleting an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCSRSubscriptionAsync(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCSRSubscriptionValidateBeforeCall(subscriptionId, local, link, ngSILDTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryCSRSubscription
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing a list of context source registration subscriptions.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryCSRSubscriptionCall(List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/csourceSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCSRSubscriptionValidateBeforeCall(List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        return queryCSRSubscriptionCall(options, limit, count, local, link, ngSILDTenant, _callback);

    }

    /**
     * Retrieval of list of subscriptions to Csource registrations 
     * 5.11.5 Query Context Source Registration Subscriptions.  This operation allows querying existing Context Source Registration Subscriptions. 
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return List&lt;QuerySubscription200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing a list of context source registration subscriptions.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<QuerySubscription200ResponseInner> queryCSRSubscription(List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<List<QuerySubscription200ResponseInner>> localVarResp = queryCSRSubscriptionWithHttpInfo(options, limit, count, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Retrieval of list of subscriptions to Csource registrations 
     * 5.11.5 Query Context Source Registration Subscriptions.  This operation allows querying existing Context Source Registration Subscriptions. 
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;List&lt;QuerySubscription200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing a list of context source registration subscriptions.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<QuerySubscription200ResponseInner>> queryCSRSubscriptionWithHttpInfo(List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = queryCSRSubscriptionValidateBeforeCall(options, limit, count, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<List<QuerySubscription200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieval of list of subscriptions to Csource registrations  (asynchronously)
     * 5.11.5 Query Context Source Registration Subscriptions.  This operation allows querying existing Context Source Registration Subscriptions. 
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing a list of context source registration subscriptions.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryCSRSubscriptionAsync(List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback<List<QuerySubscription200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCSRSubscriptionValidateBeforeCall(options, limit, count, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<List<QuerySubscription200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCSRSubscription
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target context source registration subscription.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCSRSubscriptionCall(URI subscriptionId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/csourceSubscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCSRSubscriptionValidateBeforeCall(URI subscriptionId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling retrieveCSRSubscription(Async)");
        }

        return retrieveCSRSubscriptionCall(subscriptionId, options, local, link, ngSILDTenant, _callback);

    }

    /**
     * Csource registration subscription update by id 
     * 5.11.4 Retrieve Context Source Registration Subscription.  This operation allows retrieving an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return QuerySubscription200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target context source registration subscription.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public QuerySubscription200ResponseInner retrieveCSRSubscription(URI subscriptionId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<QuerySubscription200ResponseInner> localVarResp = retrieveCSRSubscriptionWithHttpInfo(subscriptionId, options, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Csource registration subscription update by id 
     * 5.11.4 Retrieve Context Source Registration Subscription.  This operation allows retrieving an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;QuerySubscription200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target context source registration subscription.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<QuerySubscription200ResponseInner> retrieveCSRSubscriptionWithHttpInfo(URI subscriptionId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveCSRSubscriptionValidateBeforeCall(subscriptionId, options, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<QuerySubscription200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Csource registration subscription update by id  (asynchronously)
     * 5.11.4 Retrieve Context Source Registration Subscription.  This operation allows retrieving an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target context source registration subscription.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCSRSubscriptionAsync(URI subscriptionId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback<QuerySubscription200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCSRSubscriptionValidateBeforeCall(subscriptionId, options, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<QuerySubscription200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCSRSubscription
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param subscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The context source registration subscription was successfully updated.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateCSRSubscriptionCall(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, Subscription subscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscription;

        // create path and map variables
        String localVarPath = "/csourceSubscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/json+ld"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCSRSubscriptionValidateBeforeCall(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, Subscription subscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateCSRSubscription(Async)");
        }

        return updateCSRSubscriptionCall(subscriptionId, local, link, ngSILDTenant, subscription, _callback);

    }

    /**
     * Csource registration subscription update by id 
     * 5.11.3 Update Context Source Registration Subscription.  This operation allows updating an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param subscription  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The context source registration subscription was successfully updated.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public void updateCSRSubscription(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, Subscription subscription) throws ApiException {
        updateCSRSubscriptionWithHttpInfo(subscriptionId, local, link, ngSILDTenant, subscription);
    }

    /**
     * Csource registration subscription update by id 
     * 5.11.3 Update Context Source Registration Subscription.  This operation allows updating an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param subscription  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The context source registration subscription was successfully updated.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCSRSubscriptionWithHttpInfo(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, Subscription subscription) throws ApiException {
        okhttp3.Call localVarCall = updateCSRSubscriptionValidateBeforeCall(subscriptionId, local, link, ngSILDTenant, subscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Csource registration subscription update by id  (asynchronously)
     * 5.11.3 Update Context Source Registration Subscription.  This operation allows updating an existing Context Source Registration Subscription. 
     * @param subscriptionId Id (URI) of the concerned subscription. (required)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param subscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The context source registration subscription was successfully updated.  </td><td>  * NGSILD-Tenant -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateCSRSubscriptionAsync(URI subscriptionId, Boolean local, URI link, String ngSILDTenant, Subscription subscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCSRSubscriptionValidateBeforeCall(subscriptionId, local, link, ngSILDTenant, subscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
