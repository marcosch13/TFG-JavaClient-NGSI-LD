/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyValuePair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 5.2.15 This datatype represents the parameters that are required in order to define an endpoint for notifications. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:11:22.919984907Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class Endpoint {
  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  @javax.annotation.Nonnull
  private URI uri;

  /**
   * Intended to convey the MIME type of the notification payload body (JSON, or JSON-LD, or GeoJSON). If not present, default is \&quot;application/json\&quot;. 
   */
  @JsonAdapter(AcceptEnum.Adapter.class)
  public enum AcceptEnum {
    APPLICATION_JSON("application/json"),
    
    APPLICATION_LD_JSON("application/ld+json"),
    
    APPLICATION_GEO_JSON("application/geo+json");

    private String value;

    AcceptEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcceptEnum fromValue(String value) {
      for (AcceptEnum b : AcceptEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcceptEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcceptEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcceptEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcceptEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcceptEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCEPT = "accept";
  @SerializedName(SERIALIZED_NAME_ACCEPT)
  @javax.annotation.Nullable
  private AcceptEnum accept;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private BigDecimal timeout;

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  @javax.annotation.Nullable
  private BigDecimal cooldown;

  public static final String SERIALIZED_NAME_RECEIVER_INFO = "receiverInfo";
  @SerializedName(SERIALIZED_NAME_RECEIVER_INFO)
  @javax.annotation.Nullable
  private List<KeyValuePair> receiverInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFIER_INFO = "notifierInfo";
  @SerializedName(SERIALIZED_NAME_NOTIFIER_INFO)
  @javax.annotation.Nullable
  private List<KeyValuePair> notifierInfo = new ArrayList<>();

  public Endpoint() {
  }

  public Endpoint uri(@javax.annotation.Nonnull URI uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI which conveys the endpoint which will receive the notification. 
   * @return uri
   */
  @javax.annotation.Nonnull
  public URI getUri() {
    return uri;
  }

  public void setUri(@javax.annotation.Nonnull URI uri) {
    this.uri = uri;
  }


  public Endpoint accept(@javax.annotation.Nullable AcceptEnum accept) {
    this.accept = accept;
    return this;
  }

  /**
   * Intended to convey the MIME type of the notification payload body (JSON, or JSON-LD, or GeoJSON). If not present, default is \&quot;application/json\&quot;. 
   * @return accept
   */
  @javax.annotation.Nullable
  public AcceptEnum getAccept() {
    return accept;
  }

  public void setAccept(@javax.annotation.Nullable AcceptEnum accept) {
    this.accept = accept;
  }


  public Endpoint timeout(@javax.annotation.Nullable BigDecimal timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Maximum period of time in milliseconds which may elapse before a notification is assumed to have failed. The NGSI-LD system can override this value. This only applies if the binding protocol always returns a  response. 
   * minimum: 1
   * @return timeout
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable BigDecimal timeout) {
    this.timeout = timeout;
  }


  public Endpoint cooldown(@javax.annotation.Nullable BigDecimal cooldown) {
    this.cooldown = cooldown;
    return this;
  }

  /**
   * Once a failure has occurred, minimum period of time in milliseconds which shall elapse before attempting to make a subsequent notification to the same endpoint after failure. If requests are received before the cooldown period has expired, no notification is sent. 
   * minimum: 1
   * @return cooldown
   */
  @javax.annotation.Nullable
  public BigDecimal getCooldown() {
    return cooldown;
  }

  public void setCooldown(@javax.annotation.Nullable BigDecimal cooldown) {
    this.cooldown = cooldown;
  }


  public Endpoint receiverInfo(@javax.annotation.Nullable List<KeyValuePair> receiverInfo) {
    this.receiverInfo = receiverInfo;
    return this;
  }

  public Endpoint addReceiverInfoItem(KeyValuePair receiverInfoItem) {
    if (this.receiverInfo == null) {
      this.receiverInfo = new ArrayList<>();
    }
    this.receiverInfo.add(receiverInfoItem);
    return this;
  }

  /**
   * Generic {key, value} array to convey optional information to the receiver. 
   * @return receiverInfo
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getReceiverInfo() {
    return receiverInfo;
  }

  public void setReceiverInfo(@javax.annotation.Nullable List<KeyValuePair> receiverInfo) {
    this.receiverInfo = receiverInfo;
  }


  public Endpoint notifierInfo(@javax.annotation.Nullable List<KeyValuePair> notifierInfo) {
    this.notifierInfo = notifierInfo;
    return this;
  }

  public Endpoint addNotifierInfoItem(KeyValuePair notifierInfoItem) {
    if (this.notifierInfo == null) {
      this.notifierInfo = new ArrayList<>();
    }
    this.notifierInfo.add(notifierInfoItem);
    return this;
  }

  /**
   * Generic {key, value} array to set up the communication channel. 
   * @return notifierInfo
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getNotifierInfo() {
    return notifierInfo;
  }

  public void setNotifierInfo(@javax.annotation.Nullable List<KeyValuePair> notifierInfo) {
    this.notifierInfo = notifierInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Endpoint instance itself
   */
  public Endpoint putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Endpoint endpoint = (Endpoint) o;
    return Objects.equals(this.uri, endpoint.uri) &&
        Objects.equals(this.accept, endpoint.accept) &&
        Objects.equals(this.timeout, endpoint.timeout) &&
        Objects.equals(this.cooldown, endpoint.cooldown) &&
        Objects.equals(this.receiverInfo, endpoint.receiverInfo) &&
        Objects.equals(this.notifierInfo, endpoint.notifierInfo)&&
        Objects.equals(this.additionalProperties, endpoint.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, accept, timeout, cooldown, receiverInfo, notifierInfo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Endpoint {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    accept: ").append(toIndentedString(accept)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    receiverInfo: ").append(toIndentedString(receiverInfo)).append("\n");
    sb.append("    notifierInfo: ").append(toIndentedString(notifierInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uri");
    openapiFields.add("accept");
    openapiFields.add("timeout");
    openapiFields.add("cooldown");
    openapiFields.add("receiverInfo");
    openapiFields.add("notifierInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Endpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Endpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Endpoint is not found in the empty JSON string", Endpoint.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Endpoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("accept") != null && !jsonObj.get("accept").isJsonNull()) && !jsonObj.get("accept").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept").toString()));
      }
      // validate the optional field `accept`
      if (jsonObj.get("accept") != null && !jsonObj.get("accept").isJsonNull()) {
        AcceptEnum.validateJsonElement(jsonObj.get("accept"));
      }
      if (jsonObj.get("receiverInfo") != null && !jsonObj.get("receiverInfo").isJsonNull()) {
        JsonArray jsonArrayreceiverInfo = jsonObj.getAsJsonArray("receiverInfo");
        if (jsonArrayreceiverInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receiverInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receiverInfo` to be an array in the JSON string but got `%s`", jsonObj.get("receiverInfo").toString()));
          }

          // validate the optional field `receiverInfo` (array)
          for (int i = 0; i < jsonArrayreceiverInfo.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArrayreceiverInfo.get(i));
          };
        }
      }
      if (jsonObj.get("notifierInfo") != null && !jsonObj.get("notifierInfo").isJsonNull()) {
        JsonArray jsonArraynotifierInfo = jsonObj.getAsJsonArray("notifierInfo");
        if (jsonArraynotifierInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifierInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifierInfo` to be an array in the JSON string but got `%s`", jsonObj.get("notifierInfo").toString()));
          }

          // validate the optional field `notifierInfo` (array)
          for (int i = 0; i < jsonArraynotifierInfo.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArraynotifierInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Endpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Endpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Endpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Endpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<Endpoint>() {
           @Override
           public void write(JsonWriter out, Endpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Endpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Endpoint instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Endpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Endpoint
   * @throws IOException if the JSON string is invalid with respect to Endpoint
   */
  public static Endpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Endpoint.class);
  }

  /**
   * Convert an instance of Endpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

