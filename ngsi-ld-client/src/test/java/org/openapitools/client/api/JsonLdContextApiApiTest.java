/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateContextRequest;
import org.openapitools.client.model.ListContexts200Response;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.RetrieveContext200Response;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JsonLdContextApiApi
 */
@Disabled
public class JsonLdContextApiApiTest {

    private final JsonLdContextApiApi api = new JsonLdContextApiApi();

    /**
     * Add a user @context to the internal cache 
     *
     * 5.13.2 Add @context.  With this operation, a client can ask the Broker to store the full content of a specific @context, by giving it to the Broker. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContextTest() throws ApiException {
        String ngSILDTenant = null;
        CreateContextRequest createContextRequest = null;
        api.createContext(ngSILDTenant, createContextRequest);
        // TODO: test validations
    }

    /**
     * Delete one specific @context from internal cache, possibly re-inserting a freshly downloaded copy of it 
     *
     * 5.13.5 Delete and Reload @context  With this operation, a client supplies a local identifier to the Broker, indicating a stored @context, that the Broker shall remove from its storage. For @contexts of kind \&quot;Cached\&quot; this can also be the original URL the Broker downloaded the @context from. If the entry in the local storage that corresponds to the identifier is itself an array of @contexts, this operation will not delete the children, i.e. the @contexts in the array, but just the entry. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContextTest() throws ApiException {
        URI contextId = null;
        Boolean reload = null;
        String ngSILDTenant = null;
        api.deleteContext(contextId, reload, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * List all cached @contexts 
     *
     * 5.13.3 List @contexts.  With this operation a client can obtain a list of URLs that represent all of the @contexts stored in the local context store of the Broker. Each URL can be used to download the corresponding @context, and, in case the @context&#39;s kind is \&quot;Cached\&quot;, it shall be the original URL the Broker downloaded the @context from.  In case a \&quot;details\&quot; flag is set to true, the client obtains a list of JSON objects, each representing information (metadata) about an @context currently stored by the Broker. Each JSON object contains information about the @context&#39;s original URL (if any), its local identifier in the Broker&#39;s storage, its kind (\&quot;Cached\&quot;, \&quot;Hosted\&quot; and \&quot;ImplicitlyCreated\&quot;), its creation timestamp, its expiry date (if \&quot;Cached\&quot;), and additional optional information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContextsTest() throws ApiException {
        Boolean details = null;
        String kind = null;
        String ngSILDTenant = null;
        ListContexts200Response response = api.listContexts(details, kind, ngSILDTenant);
        // TODO: test validations
    }

    /**
     * Serve one specific user @context 
     *
     * 5.13.4 Serve @context.  With this operation a client can obtain the full content of a specific @context (only for @contexts of kind \&quot;Hosted\&quot; or \&quot;ImplicitlyCreated\&quot;), which is currently stored in the Broker&#39;s internal storage, or its metadata (for all kinds of stored @contexts). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveContextTest() throws ApiException {
        URI contextId = null;
        Boolean details = null;
        String ngSILDTenant = null;
        RetrieveContext200Response response = api.retrieveContext(contextId, details, ngSILDTenant);
        // TODO: test validations
    }

}
