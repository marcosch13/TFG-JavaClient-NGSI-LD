/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.OptionsSysAttrs;
import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.QueryCSR200ResponseInner;
import org.openapitools.client.model.QueryCSR200ResponseInner1;
import org.openapitools.client.model.QueryEntityCoordinatesParameter;
import org.openapitools.client.model.QueryEntityGeorelParameter;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContextSourceDiscoveryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContextSourceDiscoveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContextSourceDiscoveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryCSR
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param timeproperty Allowed values: \&quot;observedAt\&quot;, \&quot;createdAt\&quot;, \&quot;modifiedAt\&quot; and \&quot;deletedAt\&quot;. If not specified, the default is \&quot;observedAt\&quot;. (See clause 4.8)  (optional, default to observedAt)
     * @param timerel Allowed values: \&quot;before\&quot;, \&quot;after\&quot;, \&quot;between\&quot;  (optional)
     * @param timeAt It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11.  (optional)
     * @param endTimeAt It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \&quot;between\&quot;. String representing the endTimeAt parameter as defined by clause 4.11.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as an array of context source registrations.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryCSRCall(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String timeproperty, String timerel, OffsetDateTime timeAt, OffsetDateTime endTimeAt, String geometryProperty, String lang, String scopeQ, List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/csourceRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idPattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idPattern", idPattern));
        }

        if (attrs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "attrs", attrs));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (csf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("csf", csf));
        }

        if (geometry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometry", geometry));
        }

        if (georel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("georel", georel));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (geoproperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoproperty", geoproperty));
        }

        if (timeproperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeproperty", timeproperty));
        }

        if (timerel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timerel", timerel));
        }

        if (timeAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeAt", timeAt));
        }

        if (endTimeAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTimeAt", endTimeAt));
        }

        if (geometryProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometryProperty", geometryProperty));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (scopeQ != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopeQ", scopeQ));
        }

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCSRValidateBeforeCall(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String timeproperty, String timerel, OffsetDateTime timeAt, OffsetDateTime endTimeAt, String geometryProperty, String lang, String scopeQ, List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        return queryCSRCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, timeproperty, timerel, timeAt, endTimeAt, geometryProperty, lang, scopeQ, options, limit, count, local, link, ngSILDTenant, _callback);

    }

    /**
     * Discover Csource registrations 
     * 5.10.2 Query Context Source Registrations.  This operation allows discovering context source registrations from an NGSI-LD system. The behaviour of the discovery of context source registrations differs significantly from the querying of entities as described in clause 5.7.2. The approach is that the client submits a query for entities as described in clause 5.7.2, but instead of receiving the Entity information, it receives a list of Context Source Registrations describing Context Sources that possibly have some of the requested Entity information. This means that the requested Entities and Attributes are matched against the &#39;information&#39; property as described in clause 5.12.  If no temporal query is present, only Context Source Registrations for Context Sources providing latest information, i.e. without specified time intervals, are considered. If a temporal query is present only Context Source Registrations with matching time intervals, i.e. observationInterval or managementInterval, are considered. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param timeproperty Allowed values: \&quot;observedAt\&quot;, \&quot;createdAt\&quot;, \&quot;modifiedAt\&quot; and \&quot;deletedAt\&quot;. If not specified, the default is \&quot;observedAt\&quot;. (See clause 4.8)  (optional, default to observedAt)
     * @param timerel Allowed values: \&quot;before\&quot;, \&quot;after\&quot;, \&quot;between\&quot;  (optional)
     * @param timeAt It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11.  (optional)
     * @param endTimeAt It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \&quot;between\&quot;. String representing the endTimeAt parameter as defined by clause 4.11.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return List&lt;QueryCSR200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as an array of context source registrations.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public List<QueryCSR200ResponseInner> queryCSR(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String timeproperty, String timerel, OffsetDateTime timeAt, OffsetDateTime endTimeAt, String geometryProperty, String lang, String scopeQ, List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<List<QueryCSR200ResponseInner>> localVarResp = queryCSRWithHttpInfo(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, timeproperty, timerel, timeAt, endTimeAt, geometryProperty, lang, scopeQ, options, limit, count, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Discover Csource registrations 
     * 5.10.2 Query Context Source Registrations.  This operation allows discovering context source registrations from an NGSI-LD system. The behaviour of the discovery of context source registrations differs significantly from the querying of entities as described in clause 5.7.2. The approach is that the client submits a query for entities as described in clause 5.7.2, but instead of receiving the Entity information, it receives a list of Context Source Registrations describing Context Sources that possibly have some of the requested Entity information. This means that the requested Entities and Attributes are matched against the &#39;information&#39; property as described in clause 5.12.  If no temporal query is present, only Context Source Registrations for Context Sources providing latest information, i.e. without specified time intervals, are considered. If a temporal query is present only Context Source Registrations with matching time intervals, i.e. observationInterval or managementInterval, are considered. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param timeproperty Allowed values: \&quot;observedAt\&quot;, \&quot;createdAt\&quot;, \&quot;modifiedAt\&quot; and \&quot;deletedAt\&quot;. If not specified, the default is \&quot;observedAt\&quot;. (See clause 4.8)  (optional, default to observedAt)
     * @param timerel Allowed values: \&quot;before\&quot;, \&quot;after\&quot;, \&quot;between\&quot;  (optional)
     * @param timeAt It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11.  (optional)
     * @param endTimeAt It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \&quot;between\&quot;. String representing the endTimeAt parameter as defined by clause 4.11.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;List&lt;QueryCSR200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as an array of context source registrations.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<QueryCSR200ResponseInner>> queryCSRWithHttpInfo(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String timeproperty, String timerel, OffsetDateTime timeAt, OffsetDateTime endTimeAt, String geometryProperty, String lang, String scopeQ, List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = queryCSRValidateBeforeCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, timeproperty, timerel, timeAt, endTimeAt, geometryProperty, lang, scopeQ, options, limit, count, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<List<QueryCSR200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discover Csource registrations  (asynchronously)
     * 5.10.2 Query Context Source Registrations.  This operation allows discovering context source registrations from an NGSI-LD system. The behaviour of the discovery of context source registrations differs significantly from the querying of entities as described in clause 5.7.2. The approach is that the client submits a query for entities as described in clause 5.7.2, but instead of receiving the Entity information, it receives a list of Context Source Registrations describing Context Sources that possibly have some of the requested Entity information. This means that the requested Entities and Attributes are matched against the &#39;information&#39; property as described in clause 5.12.  If no temporal query is present, only Context Source Registrations for Context Sources providing latest information, i.e. without specified time intervals, are considered. If a temporal query is present only Context Source Registrations with matching time intervals, i.e. observationInterval or managementInterval, are considered. 
     * @param id List of entity ids to be retrieved. (optional)
     * @param type Selection of Entity Types as per clause 4.17.  (optional)
     * @param idPattern Regular expression that shall be matched by entity ids. (optional)
     * @param attrs List of Attributes to be matched by the Entity and included in the response. If the Entity does not have any of the Attributes in attrs, then a 404 Not Found shall be retrieved. If attrs is not specified, no matching is performed and all Attributes related to the Entity shall be retrieved.  (optional)
     * @param q Query as per clause 4.9.  (optional)
     * @param csf Context Source filter as per clause 4.9. (optional)
     * @param geometry Geometry as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param georel Geo relationship as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param coordinates Coordinates serialized as a string as per clause 4.10. It is part of geoquery. It shall be one if geometry or georel are present.  (optional)
     * @param geoproperty The name of the Property that contains the geospatial data that will be used to resolve the geoquery. By default, will be location (see clause 4.7). It shall be ignored unless a geoquery is present.  (optional, default to location)
     * @param timeproperty Allowed values: \&quot;observedAt\&quot;, \&quot;createdAt\&quot;, \&quot;modifiedAt\&quot; and \&quot;deletedAt\&quot;. If not specified, the default is \&quot;observedAt\&quot;. (See clause 4.8)  (optional, default to observedAt)
     * @param timerel Allowed values: \&quot;before\&quot;, \&quot;after\&quot;, \&quot;between\&quot;  (optional)
     * @param timeAt It shall be a DateTime. Cardinality shall be 1 if timerel is present. String representing the timeAt parameter as defined by clause 4.11.  (optional)
     * @param endTimeAt It shall be a DateTime. Cardinality shall be 1 if timerel is equal to \&quot;between\&quot;. String representing the endTimeAt parameter as defined by clause 4.11.  (optional)
     * @param geometryProperty 4.5.16.1 Top-level \&quot;geometry\&quot; field selection algorithm.  A parameter of the request (named \&quot;geometryProperty\&quot;) may be used to indicate the name of the GeoProperty to be selected.  If this parameter is not present, then the default name of \&quot;location\&quot; shall be used.  In the case of GeoJSON Entity representation, this parameter indicates which GeoProperty to use for the toplevel geometry field.  (optional)
     * @param lang It is used to reduce languageMaps to a string or string array property in a single preferred language.  (optional)
     * @param scopeQ Scope query (see clause 4.19).  (optional)
     * @param options  (optional)
     * @param limit 6.3.10 Pagination behaviour. It defines the limit to the number of NGSI-LD Elements that shall be retrieved at a maximum as mandated by clause 5.5.9. The value 0 is only allowed in combination with the count URI parameter.  (optional)
     * @param count 6.3.13 Counting number of results. If true, then a special HTTP header (NGSILD-Results-Count) is set in the response. Regardless of how many entities are actually returned (maybe due to the \&quot;limit\&quot; URI parameter), the total number of matching results (e.g. number of Entities) is returned.  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the query result as an array of context source registrations.  </td><td>  * NGSILD-Results-Count -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call queryCSRAsync(List<URI> id, String type, String idPattern, List<String> attrs, String q, String csf, String geometry, QueryEntityGeorelParameter georel, QueryEntityCoordinatesParameter coordinates, String geoproperty, String timeproperty, String timerel, OffsetDateTime timeAt, OffsetDateTime endTimeAt, String geometryProperty, String lang, String scopeQ, List<OptionsSysAttrs> options, Integer limit, Boolean count, Boolean local, URI link, String ngSILDTenant, final ApiCallback<List<QueryCSR200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCSRValidateBeforeCall(id, type, idPattern, attrs, q, csf, geometry, georel, coordinates, geoproperty, timeproperty, timerel, timeAt, endTimeAt, geometryProperty, lang, scopeQ, options, limit, count, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<List<QueryCSR200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCSR
     * @param registrationId Id (URI) of the context source registration. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target subscription.  </td><td>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCSRCall(URI registrationId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/csourceRegistrations/{registrationId}"
            .replace("{" + "registrationId" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (options != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "options", options));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json+ld"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (link != null) {
            localVarHeaderParams.put("Link", localVarApiClient.parameterToString(link));
        }


        if (ngSILDTenant != null) {
            localVarHeaderParams.put("NGSILD-Tenant", localVarApiClient.parameterToString(ngSILDTenant));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCSRValidateBeforeCall(URI registrationId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling retrieveCSR(Async)");
        }

        return retrieveCSRCall(registrationId, options, local, link, ngSILDTenant, _callback);

    }

    /**
     * Csource registration retrieval by id 
     * 5.10.1 Retrieve Context Source Registration.  This operation allows retrieving a specific context source registration from an NGSI-LD system. 
     * @param registrationId Id (URI) of the context source registration. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return QueryCSR200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target subscription.  </td><td>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public QueryCSR200ResponseInner retrieveCSR(URI registrationId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        ApiResponse<QueryCSR200ResponseInner> localVarResp = retrieveCSRWithHttpInfo(registrationId, options, local, link, ngSILDTenant);
        return localVarResp.getData();
    }

    /**
     * Csource registration retrieval by id 
     * 5.10.1 Retrieve Context Source Registration.  This operation allows retrieving a specific context source registration from an NGSI-LD system. 
     * @param registrationId Id (URI) of the context source registration. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @return ApiResponse&lt;QueryCSR200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target subscription.  </td><td>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<QueryCSR200ResponseInner> retrieveCSRWithHttpInfo(URI registrationId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant) throws ApiException {
        okhttp3.Call localVarCall = retrieveCSRValidateBeforeCall(registrationId, options, local, link, ngSILDTenant, null);
        Type localVarReturnType = new TypeToken<QueryCSR200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Csource registration retrieval by id  (asynchronously)
     * 5.10.1 Retrieve Context Source Registration.  This operation allows retrieving a specific context source registration from an NGSI-LD system. 
     * @param registrationId Id (URI) of the context source registration. (required)
     * @param options  (optional)
     * @param local 6.3.18 Limiting Distributed Operations. If local&#x3D;true then no Context Source Registrations shall be considered as matching to avoid cascading distributed operations (see clause 4.3.6.4).  (optional)
     * @param link 6.3.5 JSON-LD @context resolution  In summary, from a developer&#39;s perspective, for POST, PATCH and PUT operations, if MIME type is \&quot;application/ld+json\&quot;, then the associated @context shall be provided only as part of the request payload body. Likewise, if MIME type is \&quot;application/json\&quot;, then the associated @context shall be provided only by using the JSON-LD Link header. No mixes are allowed, i.e. mixing options shall result in HTTP response errors. Implementations should provide descriptive error messages when these situations arise.  In contrast, GET and DELETE operations always take their input @context from the JSON-LD Link Header.  (optional)
     * @param ngSILDTenant 6.3.14 Tenant specification. The tenant to which the NGSI-LD HTTP operation is targeted.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response body containing the JSON-LD representation of the target subscription.  </td><td>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 400 </td><td> It is used to indicate that the request or its content is incorrect, see clause 6.3.2. In the returned ProblemDetails structure, the \&quot;detail\&quot; attribute should convey more information about the error.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
        <tr><td> 404 </td><td> It is used when a client provided an entity identifier (URI) not known to the system, see clause 6.3.2.  </td><td>  * NGSILD-Tenant -  <br>  * NGSILD-Warning -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCSRAsync(URI registrationId, List<OptionsSysAttrs> options, Boolean local, URI link, String ngSILDTenant, final ApiCallback<QueryCSR200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCSRValidateBeforeCall(registrationId, options, local, link, ngSILDTenant, _callback);
        Type localVarReturnType = new TypeToken<QueryCSR200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
