/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntitySelector;
import org.openapitools.client.model.GeoQuery;
import org.openapitools.client.model.LdContext;
import org.openapitools.client.model.NotificationParams;
import org.openapitools.client.model.TemporalQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSubscriptionRequest1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:11:22.919984907Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class CreateSubscriptionRequest1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private URI id;

  /**
   * JSON-LD @type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SUBSCRIPTION("Subscription");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  @javax.annotation.Nullable
  private String subscriptionName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  @javax.annotation.Nullable
  private List<EntitySelector> entities = new ArrayList<>();

  /**
   * Gets or Sets notificationTrigger
   */
  @JsonAdapter(NotificationTriggerEnum.Adapter.class)
  public enum NotificationTriggerEnum {
    ENTITY_CREATED("entityCreated"),
    
    ENTITY_UPDATED("entityUpdated"),
    
    ENTITY_DELETED("entityDeleted"),
    
    ATTRIBUTE_CREATED("attributeCreated"),
    
    ATTRIBUTE_UPDATED("attributeUpdated"),
    
    ATTRIBUTE_DELETED("attributeDeleted");

    private String value;

    NotificationTriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationTriggerEnum fromValue(String value) {
      for (NotificationTriggerEnum b : NotificationTriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotificationTriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationTriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationTriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationTriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotificationTriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_TRIGGER = "notificationTrigger";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TRIGGER)
  @javax.annotation.Nullable
  private List<NotificationTriggerEnum> notificationTrigger = new ArrayList<>();

  public static final String SERIALIZED_NAME_Q = "q";
  @SerializedName(SERIALIZED_NAME_Q)
  @javax.annotation.Nullable
  private String q;

  public static final String SERIALIZED_NAME_GEO_Q = "geoQ";
  @SerializedName(SERIALIZED_NAME_GEO_Q)
  @javax.annotation.Nullable
  private GeoQuery geoQ;

  public static final String SERIALIZED_NAME_CSF = "csf";
  @SerializedName(SERIALIZED_NAME_CSF)
  @javax.annotation.Nullable
  private String csf;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  @javax.annotation.Nullable
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  @javax.annotation.Nonnull
  private NotificationParams notification;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_TEMPORAL_Q = "temporalQ";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_Q)
  @javax.annotation.Nullable
  private TemporalQuery temporalQ;

  public static final String SERIALIZED_NAME_SCOPE_Q = "scopeQ";
  @SerializedName(SERIALIZED_NAME_SCOPE_Q)
  @javax.annotation.Nullable
  private String scopeQ;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  @javax.annotation.Nullable
  private String lang;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  /**
   * Read-only. Provided by the system when querying the details of a subscription. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    PAUSED("paused"),
    
    EXPIRED("expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_JSONLD_CONTEXT = "jsonldContext";
  @SerializedName(SERIALIZED_NAME_JSONLD_CONTEXT)
  @javax.annotation.Nullable
  private URI jsonldContext;

  public static final String SERIALIZED_NAME_WATCHED_ATTRIBUTES = "watchedAttributes";
  @SerializedName(SERIALIZED_NAME_WATCHED_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<String> watchedAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_THROTTLING = "throttling";
  @SerializedName(SERIALIZED_NAME_THROTTLING)
  @javax.annotation.Nullable
  private BigDecimal throttling;

  public static final String SERIALIZED_NAME_TIME_INTERVAL = "timeInterval";
  @SerializedName(SERIALIZED_NAME_TIME_INTERVAL)
  @javax.annotation.Nullable
  private BigDecimal timeInterval;

  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  @javax.annotation.Nonnull
  private LdContext atContext;

  public CreateSubscriptionRequest1() {
  }

  public CreateSubscriptionRequest1(
     StatusEnum status
  ) {
    this();
    this.status = status;
  }

  public CreateSubscriptionRequest1 id(@javax.annotation.Nullable URI id) {
    this.id = id;
    return this;
  }

  /**
   * Subscription identifier (JSON-LD @id). 
   * @return id
   */
  @javax.annotation.Nullable
  public URI getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable URI id) {
    this.id = id;
  }


  public CreateSubscriptionRequest1 type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * JSON-LD @type. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public CreateSubscriptionRequest1 subscriptionName(@javax.annotation.Nullable String subscriptionName) {
    this.subscriptionName = subscriptionName;
    return this;
  }

  /**
   * A (short) name given to this Subscription. 
   * @return subscriptionName
   */
  @javax.annotation.Nullable
  public String getSubscriptionName() {
    return subscriptionName;
  }

  public void setSubscriptionName(@javax.annotation.Nullable String subscriptionName) {
    this.subscriptionName = subscriptionName;
  }


  public CreateSubscriptionRequest1 description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Subscription description. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateSubscriptionRequest1 entities(@javax.annotation.Nullable List<EntitySelector> entities) {
    this.entities = entities;
    return this;
  }

  public CreateSubscriptionRequest1 addEntitiesItem(EntitySelector entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Entities subscribed. 
   * @return entities
   */
  @javax.annotation.Nullable
  public List<EntitySelector> getEntities() {
    return entities;
  }

  public void setEntities(@javax.annotation.Nullable List<EntitySelector> entities) {
    this.entities = entities;
  }


  public CreateSubscriptionRequest1 notificationTrigger(@javax.annotation.Nullable List<NotificationTriggerEnum> notificationTrigger) {
    this.notificationTrigger = notificationTrigger;
    return this;
  }

  public CreateSubscriptionRequest1 addNotificationTriggerItem(NotificationTriggerEnum notificationTriggerItem) {
    if (this.notificationTrigger == null) {
      this.notificationTrigger = new ArrayList<>();
    }
    this.notificationTrigger.add(notificationTriggerItem);
    return this;
  }

  /**
   * The notification triggers listed indicate what kind of changes shall trigger a notification. If not present, the default is the combination attributeCreated and attributeUpdated. entityUpdated is equivalent to the combination attributeCreated, attributeUpdated and attributeDeleted. 
   * @return notificationTrigger
   */
  @javax.annotation.Nullable
  public List<NotificationTriggerEnum> getNotificationTrigger() {
    return notificationTrigger;
  }

  public void setNotificationTrigger(@javax.annotation.Nullable List<NotificationTriggerEnum> notificationTrigger) {
    this.notificationTrigger = notificationTrigger;
  }


  public CreateSubscriptionRequest1 q(@javax.annotation.Nullable String q) {
    this.q = q;
    return this;
  }

  /**
   * Query that shall be met by subscribed entities in order to trigger the notification. 
   * @return q
   */
  @javax.annotation.Nullable
  public String getQ() {
    return q;
  }

  public void setQ(@javax.annotation.Nullable String q) {
    this.q = q;
  }


  public CreateSubscriptionRequest1 geoQ(@javax.annotation.Nullable GeoQuery geoQ) {
    this.geoQ = geoQ;
    return this;
  }

  /**
   * Get geoQ
   * @return geoQ
   */
  @javax.annotation.Nullable
  public GeoQuery getGeoQ() {
    return geoQ;
  }

  public void setGeoQ(@javax.annotation.Nullable GeoQuery geoQ) {
    this.geoQ = geoQ;
  }


  public CreateSubscriptionRequest1 csf(@javax.annotation.Nullable String csf) {
    this.csf = csf;
    return this;
  }

  /**
   * Context source filter that shall be met by Context Source Registrations describing Context Sources to be used for Entity Subscriptions. 
   * @return csf
   */
  @javax.annotation.Nullable
  public String getCsf() {
    return csf;
  }

  public void setCsf(@javax.annotation.Nullable String csf) {
    this.csf = csf;
  }


  public CreateSubscriptionRequest1 isActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Allows clients to temporarily pause the subscription by making it inactive. true indicates that the Subscription is under operation. false indicates that the subscription is paused and notifications shall not be delivered. 
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(@javax.annotation.Nullable Boolean isActive) {
    this.isActive = isActive;
  }


  public CreateSubscriptionRequest1 notification(@javax.annotation.Nonnull NotificationParams notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nonnull
  public NotificationParams getNotification() {
    return notification;
  }

  public void setNotification(@javax.annotation.Nonnull NotificationParams notification) {
    this.notification = notification;
  }


  public CreateSubscriptionRequest1 expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Expiration date for the subscription. 
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateSubscriptionRequest1 temporalQ(@javax.annotation.Nullable TemporalQuery temporalQ) {
    this.temporalQ = temporalQ;
    return this;
  }

  /**
   * Get temporalQ
   * @return temporalQ
   */
  @javax.annotation.Nullable
  public TemporalQuery getTemporalQ() {
    return temporalQ;
  }

  public void setTemporalQ(@javax.annotation.Nullable TemporalQuery temporalQ) {
    this.temporalQ = temporalQ;
  }


  public CreateSubscriptionRequest1 scopeQ(@javax.annotation.Nullable String scopeQ) {
    this.scopeQ = scopeQ;
    return this;
  }

  /**
   * Scope query. 
   * @return scopeQ
   */
  @javax.annotation.Nullable
  public String getScopeQ() {
    return scopeQ;
  }

  public void setScopeQ(@javax.annotation.Nullable String scopeQ) {
    this.scopeQ = scopeQ;
  }


  public CreateSubscriptionRequest1 lang(@javax.annotation.Nullable String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * Language filter to be applied to the query (clause 4.15). 
   * @return lang
   */
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(@javax.annotation.Nullable String lang) {
    this.lang = lang;
  }


  public CreateSubscriptionRequest1 createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CreateSubscriptionRequest1 modifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. 
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public CreateSubscriptionRequest1 deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). 
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  /**
   * Read-only. Provided by the system when querying the details of a subscription. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  public CreateSubscriptionRequest1 jsonldContext(@javax.annotation.Nullable URI jsonldContext) {
    this.jsonldContext = jsonldContext;
    return this;
  }

  /**
   * The dereferenceable URI of the JSON-LD @context to be used when sending  a notification resulting from the subscription. If not provided, the @context used for the subscription shall be used as a default. 
   * @return jsonldContext
   */
  @javax.annotation.Nullable
  public URI getJsonldContext() {
    return jsonldContext;
  }

  public void setJsonldContext(@javax.annotation.Nullable URI jsonldContext) {
    this.jsonldContext = jsonldContext;
  }


  public CreateSubscriptionRequest1 watchedAttributes(@javax.annotation.Nullable List<String> watchedAttributes) {
    this.watchedAttributes = watchedAttributes;
    return this;
  }

  public CreateSubscriptionRequest1 addWatchedAttributesItem(String watchedAttributesItem) {
    if (this.watchedAttributes == null) {
      this.watchedAttributes = new ArrayList<>();
    }
    this.watchedAttributes.add(watchedAttributesItem);
    return this;
  }

  /**
   * Watched Attributes (Properties or Relationships). If not defined it means any Attribute. 
   * @return watchedAttributes
   */
  @javax.annotation.Nullable
  public List<String> getWatchedAttributes() {
    return watchedAttributes;
  }

  public void setWatchedAttributes(@javax.annotation.Nullable List<String> watchedAttributes) {
    this.watchedAttributes = watchedAttributes;
  }


  public CreateSubscriptionRequest1 throttling(@javax.annotation.Nullable BigDecimal throttling) {
    this.throttling = throttling;
    return this;
  }

  /**
   * Minimal period of time in seconds which shall elapse between two consecutive notifications. 
   * minimum: 1
   * @return throttling
   */
  @javax.annotation.Nullable
  public BigDecimal getThrottling() {
    return throttling;
  }

  public void setThrottling(@javax.annotation.Nullable BigDecimal throttling) {
    this.throttling = throttling;
  }


  public CreateSubscriptionRequest1 timeInterval(@javax.annotation.Nullable BigDecimal timeInterval) {
    this.timeInterval = timeInterval;
    return this;
  }

  /**
   * Indicates that a notification shall be delivered periodically regardless of attribute changes. Actually, when the time interval (in seconds) specified in this value field is reached. 
   * minimum: 1
   * @return timeInterval
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeInterval() {
    return timeInterval;
  }

  public void setTimeInterval(@javax.annotation.Nullable BigDecimal timeInterval) {
    this.timeInterval = timeInterval;
  }


  public CreateSubscriptionRequest1 atContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public LdContext getAtContext() {
    return atContext;
  }

  public void setAtContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateSubscriptionRequest1 instance itself
   */
  public CreateSubscriptionRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubscriptionRequest1 createSubscriptionRequest1 = (CreateSubscriptionRequest1) o;
    return Objects.equals(this.id, createSubscriptionRequest1.id) &&
        Objects.equals(this.type, createSubscriptionRequest1.type) &&
        Objects.equals(this.subscriptionName, createSubscriptionRequest1.subscriptionName) &&
        Objects.equals(this.description, createSubscriptionRequest1.description) &&
        Objects.equals(this.entities, createSubscriptionRequest1.entities) &&
        Objects.equals(this.notificationTrigger, createSubscriptionRequest1.notificationTrigger) &&
        Objects.equals(this.q, createSubscriptionRequest1.q) &&
        Objects.equals(this.geoQ, createSubscriptionRequest1.geoQ) &&
        Objects.equals(this.csf, createSubscriptionRequest1.csf) &&
        Objects.equals(this.isActive, createSubscriptionRequest1.isActive) &&
        Objects.equals(this.notification, createSubscriptionRequest1.notification) &&
        Objects.equals(this.expiresAt, createSubscriptionRequest1.expiresAt) &&
        Objects.equals(this.temporalQ, createSubscriptionRequest1.temporalQ) &&
        Objects.equals(this.scopeQ, createSubscriptionRequest1.scopeQ) &&
        Objects.equals(this.lang, createSubscriptionRequest1.lang) &&
        Objects.equals(this.createdAt, createSubscriptionRequest1.createdAt) &&
        Objects.equals(this.modifiedAt, createSubscriptionRequest1.modifiedAt) &&
        Objects.equals(this.deletedAt, createSubscriptionRequest1.deletedAt) &&
        Objects.equals(this.status, createSubscriptionRequest1.status) &&
        Objects.equals(this.jsonldContext, createSubscriptionRequest1.jsonldContext) &&
        Objects.equals(this.watchedAttributes, createSubscriptionRequest1.watchedAttributes) &&
        Objects.equals(this.throttling, createSubscriptionRequest1.throttling) &&
        Objects.equals(this.timeInterval, createSubscriptionRequest1.timeInterval) &&
        Objects.equals(this.atContext, createSubscriptionRequest1.atContext)&&
        Objects.equals(this.additionalProperties, createSubscriptionRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, subscriptionName, description, entities, notificationTrigger, q, geoQ, csf, isActive, notification, expiresAt, temporalQ, scopeQ, lang, createdAt, modifiedAt, deletedAt, status, jsonldContext, watchedAttributes, throttling, timeInterval, atContext, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubscriptionRequest1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    notificationTrigger: ").append(toIndentedString(notificationTrigger)).append("\n");
    sb.append("    q: ").append(toIndentedString(q)).append("\n");
    sb.append("    geoQ: ").append(toIndentedString(geoQ)).append("\n");
    sb.append("    csf: ").append(toIndentedString(csf)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    temporalQ: ").append(toIndentedString(temporalQ)).append("\n");
    sb.append("    scopeQ: ").append(toIndentedString(scopeQ)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    jsonldContext: ").append(toIndentedString(jsonldContext)).append("\n");
    sb.append("    watchedAttributes: ").append(toIndentedString(watchedAttributes)).append("\n");
    sb.append("    throttling: ").append(toIndentedString(throttling)).append("\n");
    sb.append("    timeInterval: ").append(toIndentedString(timeInterval)).append("\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("subscriptionName");
    openapiFields.add("description");
    openapiFields.add("entities");
    openapiFields.add("notificationTrigger");
    openapiFields.add("q");
    openapiFields.add("geoQ");
    openapiFields.add("csf");
    openapiFields.add("isActive");
    openapiFields.add("notification");
    openapiFields.add("expiresAt");
    openapiFields.add("temporalQ");
    openapiFields.add("scopeQ");
    openapiFields.add("lang");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("status");
    openapiFields.add("jsonldContext");
    openapiFields.add("watchedAttributes");
    openapiFields.add("throttling");
    openapiFields.add("timeInterval");
    openapiFields.add("@context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("notification");
    openapiRequiredFields.add("@context");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSubscriptionRequest1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSubscriptionRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSubscriptionRequest1 is not found in the empty JSON string", CreateSubscriptionRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSubscriptionRequest1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("subscriptionName") != null && !jsonObj.get("subscriptionName").isJsonNull()) && !jsonObj.get("subscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            EntitySelector.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationTrigger") != null && !jsonObj.get("notificationTrigger").isJsonNull() && !jsonObj.get("notificationTrigger").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationTrigger` to be an array in the JSON string but got `%s`", jsonObj.get("notificationTrigger").toString()));
      }
      if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull()) && !jsonObj.get("q").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `q` to be a primitive type in the JSON string but got `%s`", jsonObj.get("q").toString()));
      }
      // validate the optional field `geoQ`
      if (jsonObj.get("geoQ") != null && !jsonObj.get("geoQ").isJsonNull()) {
        GeoQuery.validateJsonElement(jsonObj.get("geoQ"));
      }
      if ((jsonObj.get("csf") != null && !jsonObj.get("csf").isJsonNull()) && !jsonObj.get("csf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csf").toString()));
      }
      // validate the required field `notification`
      NotificationParams.validateJsonElement(jsonObj.get("notification"));
      // validate the optional field `temporalQ`
      if (jsonObj.get("temporalQ") != null && !jsonObj.get("temporalQ").isJsonNull()) {
        TemporalQuery.validateJsonElement(jsonObj.get("temporalQ"));
      }
      if ((jsonObj.get("scopeQ") != null && !jsonObj.get("scopeQ").isJsonNull()) && !jsonObj.get("scopeQ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopeQ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scopeQ").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("jsonldContext") != null && !jsonObj.get("jsonldContext").isJsonNull()) && !jsonObj.get("jsonldContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonldContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonldContext").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("watchedAttributes") != null && !jsonObj.get("watchedAttributes").isJsonNull() && !jsonObj.get("watchedAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("watchedAttributes").toString()));
      }
      // validate the required field `@context`
      LdContext.validateJsonElement(jsonObj.get("@context"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSubscriptionRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSubscriptionRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSubscriptionRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSubscriptionRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSubscriptionRequest1>() {
           @Override
           public void write(JsonWriter out, CreateSubscriptionRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSubscriptionRequest1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CreateSubscriptionRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSubscriptionRequest1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSubscriptionRequest1
   * @throws IOException if the JSON string is invalid with respect to CreateSubscriptionRequest1
   */
  public static CreateSubscriptionRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSubscriptionRequest1.class);
  }

  /**
   * Convert an instance of CreateSubscriptionRequest1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

