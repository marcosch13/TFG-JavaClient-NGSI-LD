/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LdContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetrieveEntityTypes200Response1OneOf1Inner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T10:47:39.074561198Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class RetrieveEntityTypes200Response1OneOf1Inner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private URI id;

  /**
   * JSON-LD @type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ENTITY_TYPE("EntityType");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  @javax.annotation.Nonnull
  private String typeName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAMES = "attributeNames";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAMES)
  @javax.annotation.Nonnull
  private List<String> attributeNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  @javax.annotation.Nonnull
  private LdContext atContext;

  public RetrieveEntityTypes200Response1OneOf1Inner() {
  }

  public RetrieveEntityTypes200Response1OneOf1Inner id(@javax.annotation.Nonnull URI id) {
    this.id = id;
    return this;
  }

  /**
   * Fully Qualified Name (FQN) of the entity type being described. 
   * @return id
   */
  @javax.annotation.Nonnull
  public URI getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull URI id) {
    this.id = id;
  }


  public RetrieveEntityTypes200Response1OneOf1Inner type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * JSON-LD @type. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public RetrieveEntityTypes200Response1OneOf1Inner typeName(@javax.annotation.Nonnull String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Name of the entity type, short name if contained in @context. 
   * @return typeName
   */
  @javax.annotation.Nonnull
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(@javax.annotation.Nonnull String typeName) {
    this.typeName = typeName;
  }


  public RetrieveEntityTypes200Response1OneOf1Inner attributeNames(@javax.annotation.Nonnull List<String> attributeNames) {
    this.attributeNames = attributeNames;
    return this;
  }

  public RetrieveEntityTypes200Response1OneOf1Inner addAttributeNamesItem(String attributeNamesItem) {
    if (this.attributeNames == null) {
      this.attributeNames = new ArrayList<>();
    }
    this.attributeNames.add(attributeNamesItem);
    return this;
  }

  /**
   * List containing the names of attributes that instances of the entity type can have. 
   * @return attributeNames
   */
  @javax.annotation.Nonnull
  public List<String> getAttributeNames() {
    return attributeNames;
  }

  public void setAttributeNames(@javax.annotation.Nonnull List<String> attributeNames) {
    this.attributeNames = attributeNames;
  }


  public RetrieveEntityTypes200Response1OneOf1Inner atContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public LdContext getAtContext() {
    return atContext;
  }

  public void setAtContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RetrieveEntityTypes200Response1OneOf1Inner instance itself
   */
  public RetrieveEntityTypes200Response1OneOf1Inner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveEntityTypes200Response1OneOf1Inner retrieveEntityTypes200Response1OneOf1Inner = (RetrieveEntityTypes200Response1OneOf1Inner) o;
    return Objects.equals(this.id, retrieveEntityTypes200Response1OneOf1Inner.id) &&
        Objects.equals(this.type, retrieveEntityTypes200Response1OneOf1Inner.type) &&
        Objects.equals(this.typeName, retrieveEntityTypes200Response1OneOf1Inner.typeName) &&
        Objects.equals(this.attributeNames, retrieveEntityTypes200Response1OneOf1Inner.attributeNames) &&
        Objects.equals(this.atContext, retrieveEntityTypes200Response1OneOf1Inner.atContext)&&
        Objects.equals(this.additionalProperties, retrieveEntityTypes200Response1OneOf1Inner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, typeName, attributeNames, atContext, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveEntityTypes200Response1OneOf1Inner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    attributeNames: ").append(toIndentedString(attributeNames)).append("\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("typeName");
    openapiFields.add("attributeNames");
    openapiFields.add("@context");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("typeName");
    openapiRequiredFields.add("attributeNames");
    openapiRequiredFields.add("@context");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveEntityTypes200Response1OneOf1Inner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveEntityTypes200Response1OneOf1Inner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveEntityTypes200Response1OneOf1Inner is not found in the empty JSON string", RetrieveEntityTypes200Response1OneOf1Inner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RetrieveEntityTypes200Response1OneOf1Inner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("attributeNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("attributeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeNames` to be an array in the JSON string but got `%s`", jsonObj.get("attributeNames").toString()));
      }
      // validate the required field `@context`
      LdContext.validateJsonElement(jsonObj.get("@context"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveEntityTypes200Response1OneOf1Inner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveEntityTypes200Response1OneOf1Inner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveEntityTypes200Response1OneOf1Inner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveEntityTypes200Response1OneOf1Inner.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveEntityTypes200Response1OneOf1Inner>() {
           @Override
           public void write(JsonWriter out, RetrieveEntityTypes200Response1OneOf1Inner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveEntityTypes200Response1OneOf1Inner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RetrieveEntityTypes200Response1OneOf1Inner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveEntityTypes200Response1OneOf1Inner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveEntityTypes200Response1OneOf1Inner
   * @throws IOException if the JSON string is invalid with respect to RetrieveEntityTypes200Response1OneOf1Inner
   */
  public static RetrieveEntityTypes200Response1OneOf1Inner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveEntityTypes200Response1OneOf1Inner.class);
  }

  /**
   * Convert an instance of RetrieveEntityTypes200Response1OneOf1Inner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

