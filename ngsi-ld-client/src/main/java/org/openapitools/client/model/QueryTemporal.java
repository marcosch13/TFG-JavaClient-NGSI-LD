/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntitySelector;
import org.openapitools.client.model.GeoQuery;
import org.openapitools.client.model.TemporalQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 5.2.23 This datatype represents the information that is required in order to convey a query when a \&quot;Query Temporal Evolution of Entities\&quot; operation is to be performed (as pe clause 5.7.4). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T10:47:39.074561198Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class QueryTemporal {
  /**
   * JSON-LD @type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    QUERY("Query");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  @javax.annotation.Nullable
  private List<EntitySelector> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRS = "attrs";
  @SerializedName(SERIALIZED_NAME_ATTRS)
  @javax.annotation.Nullable
  private List<String> attrs = new ArrayList<>();

  public static final String SERIALIZED_NAME_Q = "q";
  @SerializedName(SERIALIZED_NAME_Q)
  @javax.annotation.Nullable
  private String q;

  public static final String SERIALIZED_NAME_GEO_Q = "geoQ";
  @SerializedName(SERIALIZED_NAME_GEO_Q)
  @javax.annotation.Nullable
  private GeoQuery geoQ;

  public static final String SERIALIZED_NAME_CSF = "csf";
  @SerializedName(SERIALIZED_NAME_CSF)
  @javax.annotation.Nullable
  private String csf;

  public static final String SERIALIZED_NAME_SCOPE_Q = "scopeQ";
  @SerializedName(SERIALIZED_NAME_SCOPE_Q)
  @javax.annotation.Nullable
  private String scopeQ;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  @javax.annotation.Nullable
  private String lang;

  public static final String SERIALIZED_NAME_TEMPORAL_Q = "temporalQ";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_Q)
  @javax.annotation.Nonnull
  private TemporalQuery temporalQ;

  public QueryTemporal() {
  }

  public QueryTemporal type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * JSON-LD @type. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public QueryTemporal entities(@javax.annotation.Nullable List<EntitySelector> entities) {
    this.entities = entities;
    return this;
  }

  public QueryTemporal addEntitiesItem(EntitySelector entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Entity ids, id pattern and Entity types that shall be matched by Entities in order to be retrieved. 
   * @return entities
   */
  @javax.annotation.Nullable
  public List<EntitySelector> getEntities() {
    return entities;
  }

  public void setEntities(@javax.annotation.Nullable List<EntitySelector> entities) {
    this.entities = entities;
  }


  public QueryTemporal attrs(@javax.annotation.Nullable List<String> attrs) {
    this.attrs = attrs;
    return this;
  }

  public QueryTemporal addAttrsItem(String attrsItem) {
    if (this.attrs == null) {
      this.attrs = new ArrayList<>();
    }
    this.attrs.add(attrsItem);
    return this;
  }

  /**
   * List of Attributes that shall be matched by Entities in order to be retrieved. If not present all Attributes will be retrieved. 
   * @return attrs
   */
  @javax.annotation.Nullable
  public List<String> getAttrs() {
    return attrs;
  }

  public void setAttrs(@javax.annotation.Nullable List<String> attrs) {
    this.attrs = attrs;
  }


  public QueryTemporal q(@javax.annotation.Nullable String q) {
    this.q = q;
    return this;
  }

  /**
   * Query that shall be matched by Entities in order to be retrieved. 
   * @return q
   */
  @javax.annotation.Nullable
  public String getQ() {
    return q;
  }

  public void setQ(@javax.annotation.Nullable String q) {
    this.q = q;
  }


  public QueryTemporal geoQ(@javax.annotation.Nullable GeoQuery geoQ) {
    this.geoQ = geoQ;
    return this;
  }

  /**
   * Get geoQ
   * @return geoQ
   */
  @javax.annotation.Nullable
  public GeoQuery getGeoQ() {
    return geoQ;
  }

  public void setGeoQ(@javax.annotation.Nullable GeoQuery geoQ) {
    this.geoQ = geoQ;
  }


  public QueryTemporal csf(@javax.annotation.Nullable String csf) {
    this.csf = csf;
    return this;
  }

  /**
   * Context source filter that shall be matched by Context Source Registrations describing Context Sources to be used for retrieving Entities. 
   * @return csf
   */
  @javax.annotation.Nullable
  public String getCsf() {
    return csf;
  }

  public void setCsf(@javax.annotation.Nullable String csf) {
    this.csf = csf;
  }


  public QueryTemporal scopeQ(@javax.annotation.Nullable String scopeQ) {
    this.scopeQ = scopeQ;
    return this;
  }

  /**
   * Scope query.
   * @return scopeQ
   */
  @javax.annotation.Nullable
  public String getScopeQ() {
    return scopeQ;
  }

  public void setScopeQ(@javax.annotation.Nullable String scopeQ) {
    this.scopeQ = scopeQ;
  }


  public QueryTemporal lang(@javax.annotation.Nullable String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * Language filter to be applied to the query (clause 4.15).
   * @return lang
   */
  @javax.annotation.Nullable
  public String getLang() {
    return lang;
  }

  public void setLang(@javax.annotation.Nullable String lang) {
    this.lang = lang;
  }


  public QueryTemporal temporalQ(@javax.annotation.Nonnull TemporalQuery temporalQ) {
    this.temporalQ = temporalQ;
    return this;
  }

  /**
   * Get temporalQ
   * @return temporalQ
   */
  @javax.annotation.Nonnull
  public TemporalQuery getTemporalQ() {
    return temporalQ;
  }

  public void setTemporalQ(@javax.annotation.Nonnull TemporalQuery temporalQ) {
    this.temporalQ = temporalQ;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueryTemporal instance itself
   */
  public QueryTemporal putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryTemporal queryTemporal = (QueryTemporal) o;
    return Objects.equals(this.type, queryTemporal.type) &&
        Objects.equals(this.entities, queryTemporal.entities) &&
        Objects.equals(this.attrs, queryTemporal.attrs) &&
        Objects.equals(this.q, queryTemporal.q) &&
        Objects.equals(this.geoQ, queryTemporal.geoQ) &&
        Objects.equals(this.csf, queryTemporal.csf) &&
        Objects.equals(this.scopeQ, queryTemporal.scopeQ) &&
        Objects.equals(this.lang, queryTemporal.lang) &&
        Objects.equals(this.temporalQ, queryTemporal.temporalQ)&&
        Objects.equals(this.additionalProperties, queryTemporal.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, entities, attrs, q, geoQ, csf, scopeQ, lang, temporalQ, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryTemporal {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    attrs: ").append(toIndentedString(attrs)).append("\n");
    sb.append("    q: ").append(toIndentedString(q)).append("\n");
    sb.append("    geoQ: ").append(toIndentedString(geoQ)).append("\n");
    sb.append("    csf: ").append(toIndentedString(csf)).append("\n");
    sb.append("    scopeQ: ").append(toIndentedString(scopeQ)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    temporalQ: ").append(toIndentedString(temporalQ)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("entities");
    openapiFields.add("attrs");
    openapiFields.add("q");
    openapiFields.add("geoQ");
    openapiFields.add("csf");
    openapiFields.add("scopeQ");
    openapiFields.add("lang");
    openapiFields.add("temporalQ");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("temporalQ");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryTemporal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryTemporal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryTemporal is not found in the empty JSON string", QueryTemporal.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryTemporal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            EntitySelector.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attrs") != null && !jsonObj.get("attrs").isJsonNull() && !jsonObj.get("attrs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attrs` to be an array in the JSON string but got `%s`", jsonObj.get("attrs").toString()));
      }
      if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull()) && !jsonObj.get("q").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `q` to be a primitive type in the JSON string but got `%s`", jsonObj.get("q").toString()));
      }
      // validate the optional field `geoQ`
      if (jsonObj.get("geoQ") != null && !jsonObj.get("geoQ").isJsonNull()) {
        GeoQuery.validateJsonElement(jsonObj.get("geoQ"));
      }
      if ((jsonObj.get("csf") != null && !jsonObj.get("csf").isJsonNull()) && !jsonObj.get("csf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csf").toString()));
      }
      if ((jsonObj.get("scopeQ") != null && !jsonObj.get("scopeQ").isJsonNull()) && !jsonObj.get("scopeQ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopeQ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scopeQ").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      // validate the required field `temporalQ`
      TemporalQuery.validateJsonElement(jsonObj.get("temporalQ"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryTemporal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryTemporal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryTemporal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryTemporal.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryTemporal>() {
           @Override
           public void write(JsonWriter out, QueryTemporal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryTemporal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             QueryTemporal instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryTemporal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryTemporal
   * @throws IOException if the JSON string is invalid with respect to QueryTemporal
   */
  public static QueryTemporal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryTemporal.class);
  }

  /**
   * Convert an instance of QueryTemporal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

