/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Geometry;
import org.openapitools.client.model.LdContext;
import org.openapitools.client.model.VocabularyPropertyPreviousVocab;
import org.openapitools.client.model.VocabularyPropertyVocab;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplaceAttrsRequest1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T10:47:39.074561198Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class ReplaceAttrsRequest1 {
  public static final String SERIALIZED_NAME_AT_CONTEXT = "@context";
  @SerializedName(SERIALIZED_NAME_AT_CONTEXT)
  @javax.annotation.Nonnull
  private LdContext atContext;

  /**
   * Node type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VOCABULARY_PROPERTY("VocabularyProperty");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type = TypeEnum.VOCABULARY_PROPERTY;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private Geometry value;

  public static final String SERIALIZED_NAME_OBSERVED_AT = "observedAt";
  @SerializedName(SERIALIZED_NAME_OBSERVED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime observedAt;

  public static final String SERIALIZED_NAME_UNIT_CODE = "unitCode";
  @SerializedName(SERIALIZED_NAME_UNIT_CODE)
  @javax.annotation.Nullable
  private String unitCode;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  @javax.annotation.Nullable
  private URI datasetId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  @javax.annotation.Nullable
  private URI instanceId;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUE = "previousValue";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUE)
  @javax.annotation.Nullable
  private Geometry previousValue;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  @javax.annotation.Nullable
  private URI _object;

  public static final String SERIALIZED_NAME_PREVIOUS_OBJECT = "previousObject";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_OBJECT)
  @javax.annotation.Nullable
  private URI previousObject;

  public static final String SERIALIZED_NAME_LANGUAGE_MAP = "languageMap";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_MAP)
  @javax.annotation.Nullable
  private Object languageMap;

  public static final String SERIALIZED_NAME_PREVIOUS_LANGUAGE_MAP = "previousLanguageMap";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LANGUAGE_MAP)
  @javax.annotation.Nullable
  private Object previousLanguageMap;

  public static final String SERIALIZED_NAME_VOCAB = "vocab";
  @SerializedName(SERIALIZED_NAME_VOCAB)
  @javax.annotation.Nullable
  private VocabularyPropertyVocab vocab;

  public static final String SERIALIZED_NAME_PREVIOUS_VOCAB = "previousVocab";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VOCAB)
  @javax.annotation.Nullable
  private VocabularyPropertyPreviousVocab previousVocab;

  public ReplaceAttrsRequest1() {
  }

  public ReplaceAttrsRequest1(
     URI instanceId, 
     URI previousObject, 
     Object previousLanguageMap
  ) {
    this();
    this.instanceId = instanceId;
    this.previousObject = previousObject;
    this.previousLanguageMap = previousLanguageMap;
  }

  public ReplaceAttrsRequest1 atContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
    return this;
  }

  /**
   * Get atContext
   * @return atContext
   */
  @javax.annotation.Nonnull
  public LdContext getAtContext() {
    return atContext;
  }

  public void setAtContext(@javax.annotation.Nonnull LdContext atContext) {
    this.atContext = atContext;
  }


  public ReplaceAttrsRequest1 type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Node type. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public ReplaceAttrsRequest1 value(@javax.annotation.Nullable Geometry value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Geometry getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable Geometry value) {
    this.value = value;
  }


  public ReplaceAttrsRequest1 observedAt(@javax.annotation.Nullable OffsetDateTime observedAt) {
    this.observedAt = observedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which a certain Property or Relationship became valid or was observed. For example, a temperature Value was measured by the sensor at this point in time. 
   * @return observedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservedAt() {
    return observedAt;
  }

  public void setObservedAt(@javax.annotation.Nullable OffsetDateTime observedAt) {
    this.observedAt = observedAt;
  }


  public ReplaceAttrsRequest1 unitCode(@javax.annotation.Nullable String unitCode) {
    this.unitCode = unitCode;
    return this;
  }

  /**
   * Property Value&#39;s unit code. 
   * @return unitCode
   */
  @javax.annotation.Nullable
  public String getUnitCode() {
    return unitCode;
  }

  public void setUnitCode(@javax.annotation.Nullable String unitCode) {
    this.unitCode = unitCode;
  }


  public ReplaceAttrsRequest1 datasetId(@javax.annotation.Nullable URI datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * It allows identifying a set or group of property values. 
   * @return datasetId
   */
  @javax.annotation.Nullable
  public URI getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(@javax.annotation.Nullable URI datasetId) {
    this.datasetId = datasetId;
  }


  public ReplaceAttrsRequest1 createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ReplaceAttrsRequest1 modifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. 
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public ReplaceAttrsRequest1 deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). 
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  /**
   * A URI uniquely identifying a Property instance, as mandated by (see clause 4.5.7). System generated. 
   * @return instanceId
   */
  @javax.annotation.Nullable
  public URI getInstanceId() {
    return instanceId;
  }



  public ReplaceAttrsRequest1 previousValue(@javax.annotation.Nullable Geometry previousValue) {
    this.previousValue = previousValue;
    return this;
  }

  /**
   * Get previousValue
   * @return previousValue
   */
  @javax.annotation.Nullable
  public Geometry getPreviousValue() {
    return previousValue;
  }

  public void setPreviousValue(@javax.annotation.Nullable Geometry previousValue) {
    this.previousValue = previousValue;
  }


  public ReplaceAttrsRequest1 _object(@javax.annotation.Nullable URI _object) {
    this._object = _object;
    return this;
  }

  /**
   * Relationship&#39;s target object. 
   * @return _object
   */
  @javax.annotation.Nullable
  public URI getObject() {
    return _object;
  }

  public void setObject(@javax.annotation.Nullable URI _object) {
    this._object = _object;
  }


  /**
   * Previous Relationship&#39;s target object. Only used in notifications, if the showChanges  option is explicitly requested. 
   * @return previousObject
   */
  @javax.annotation.Nullable
  public URI getPreviousObject() {
    return previousObject;
  }



  public ReplaceAttrsRequest1 languageMap(@javax.annotation.Nullable Object languageMap) {
    this.languageMap = languageMap;
    return this;
  }

  /**
   * String Property Values defined in multiple natural languages. 
   * @return languageMap
   */
  @javax.annotation.Nullable
  public Object getLanguageMap() {
    return languageMap;
  }

  public void setLanguageMap(@javax.annotation.Nullable Object languageMap) {
    this.languageMap = languageMap;
  }


  /**
   * Previous Language Property languageMap. Only used in notifications, if the showChanges  option is explicitly requested. 
   * @return previousLanguageMap
   */
  @javax.annotation.Nullable
  public Object getPreviousLanguageMap() {
    return previousLanguageMap;
  }



  public ReplaceAttrsRequest1 vocab(@javax.annotation.Nullable VocabularyPropertyVocab vocab) {
    this.vocab = vocab;
    return this;
  }

  /**
   * Get vocab
   * @return vocab
   */
  @javax.annotation.Nullable
  public VocabularyPropertyVocab getVocab() {
    return vocab;
  }

  public void setVocab(@javax.annotation.Nullable VocabularyPropertyVocab vocab) {
    this.vocab = vocab;
  }


  public ReplaceAttrsRequest1 previousVocab(@javax.annotation.Nullable VocabularyPropertyPreviousVocab previousVocab) {
    this.previousVocab = previousVocab;
    return this;
  }

  /**
   * Get previousVocab
   * @return previousVocab
   */
  @javax.annotation.Nullable
  public VocabularyPropertyPreviousVocab getPreviousVocab() {
    return previousVocab;
  }

  public void setPreviousVocab(@javax.annotation.Nullable VocabularyPropertyPreviousVocab previousVocab) {
    this.previousVocab = previousVocab;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReplaceAttrsRequest1 instance itself
   */
  public ReplaceAttrsRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceAttrsRequest1 replaceAttrsRequest1 = (ReplaceAttrsRequest1) o;
    return Objects.equals(this.atContext, replaceAttrsRequest1.atContext) &&
        Objects.equals(this.type, replaceAttrsRequest1.type) &&
        Objects.equals(this.value, replaceAttrsRequest1.value) &&
        Objects.equals(this.observedAt, replaceAttrsRequest1.observedAt) &&
        Objects.equals(this.unitCode, replaceAttrsRequest1.unitCode) &&
        Objects.equals(this.datasetId, replaceAttrsRequest1.datasetId) &&
        Objects.equals(this.createdAt, replaceAttrsRequest1.createdAt) &&
        Objects.equals(this.modifiedAt, replaceAttrsRequest1.modifiedAt) &&
        Objects.equals(this.deletedAt, replaceAttrsRequest1.deletedAt) &&
        Objects.equals(this.instanceId, replaceAttrsRequest1.instanceId) &&
        Objects.equals(this.previousValue, replaceAttrsRequest1.previousValue) &&
        Objects.equals(this._object, replaceAttrsRequest1._object) &&
        Objects.equals(this.previousObject, replaceAttrsRequest1.previousObject) &&
        Objects.equals(this.languageMap, replaceAttrsRequest1.languageMap) &&
        Objects.equals(this.previousLanguageMap, replaceAttrsRequest1.previousLanguageMap) &&
        Objects.equals(this.vocab, replaceAttrsRequest1.vocab) &&
        Objects.equals(this.previousVocab, replaceAttrsRequest1.previousVocab)&&
        Objects.equals(this.additionalProperties, replaceAttrsRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atContext, type, value, observedAt, unitCode, datasetId, createdAt, modifiedAt, deletedAt, instanceId, previousValue, _object, previousObject, languageMap, previousLanguageMap, vocab, previousVocab, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceAttrsRequest1 {\n");
    sb.append("    atContext: ").append(toIndentedString(atContext)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    observedAt: ").append(toIndentedString(observedAt)).append("\n");
    sb.append("    unitCode: ").append(toIndentedString(unitCode)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    previousValue: ").append(toIndentedString(previousValue)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    previousObject: ").append(toIndentedString(previousObject)).append("\n");
    sb.append("    languageMap: ").append(toIndentedString(languageMap)).append("\n");
    sb.append("    previousLanguageMap: ").append(toIndentedString(previousLanguageMap)).append("\n");
    sb.append("    vocab: ").append(toIndentedString(vocab)).append("\n");
    sb.append("    previousVocab: ").append(toIndentedString(previousVocab)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@context");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("observedAt");
    openapiFields.add("unitCode");
    openapiFields.add("datasetId");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("instanceId");
    openapiFields.add("previousValue");
    openapiFields.add("object");
    openapiFields.add("previousObject");
    openapiFields.add("languageMap");
    openapiFields.add("previousLanguageMap");
    openapiFields.add("vocab");
    openapiFields.add("previousVocab");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@context");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceAttrsRequest1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceAttrsRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceAttrsRequest1 is not found in the empty JSON string", ReplaceAttrsRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplaceAttrsRequest1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `@context`
      LdContext.validateJsonElement(jsonObj.get("@context"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        Geometry.validateJsonElement(jsonObj.get("value"));
      }
      if ((jsonObj.get("unitCode") != null && !jsonObj.get("unitCode").isJsonNull()) && !jsonObj.get("unitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitCode").toString()));
      }
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // validate the optional field `previousValue`
      if (jsonObj.get("previousValue") != null && !jsonObj.get("previousValue").isJsonNull()) {
        Geometry.validateJsonElement(jsonObj.get("previousValue"));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("previousObject") != null && !jsonObj.get("previousObject").isJsonNull()) && !jsonObj.get("previousObject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousObject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousObject").toString()));
      }
      // validate the optional field `vocab`
      if (jsonObj.get("vocab") != null && !jsonObj.get("vocab").isJsonNull()) {
        VocabularyPropertyVocab.validateJsonElement(jsonObj.get("vocab"));
      }
      // validate the optional field `previousVocab`
      if (jsonObj.get("previousVocab") != null && !jsonObj.get("previousVocab").isJsonNull()) {
        VocabularyPropertyPreviousVocab.validateJsonElement(jsonObj.get("previousVocab"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceAttrsRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceAttrsRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceAttrsRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceAttrsRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceAttrsRequest1>() {
           @Override
           public void write(JsonWriter out, ReplaceAttrsRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceAttrsRequest1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ReplaceAttrsRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceAttrsRequest1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceAttrsRequest1
   * @throws IOException if the JSON string is invalid with respect to ReplaceAttrsRequest1
   */
  public static ReplaceAttrsRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceAttrsRequest1.class);
  }

  /**
   * Convert an instance of ReplaceAttrsRequest1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

