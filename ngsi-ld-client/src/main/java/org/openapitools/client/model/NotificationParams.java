/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Endpoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 5.2.14 This datatype represents the parameters that allow to convey the details of a notification. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T10:47:39.074561198Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class NotificationParams {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<String> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYS_ATTRS = "sysAttrs";
  @SerializedName(SERIALIZED_NAME_SYS_ATTRS)
  @javax.annotation.Nullable
  private Boolean sysAttrs = false;

  /**
   * Conveys the representation format of the entities delivered at notification time. By default, it will be in the normalized format. 
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    NORMALIZED("normalized"),
    
    CONCISE("concise"),
    
    KEY_VALUES("keyValues");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private FormatEnum format;

  public static final String SERIALIZED_NAME_SHOW_CHANGES = "showChanges";
  @SerializedName(SERIALIZED_NAME_SHOW_CHANGES)
  @javax.annotation.Nullable
  private Boolean showChanges = false;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nonnull
  private Endpoint endpoint;

  /**
   * Status of the Notification. It shall be \&quot;ok\&quot; if the last attempt to notify the subscriber succeeded. It shall be \&quot;failed\&quot; if the last attempt to notify the subscriber failed. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("ok"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIMES_SENT = "timesSent";
  @SerializedName(SERIALIZED_NAME_TIMES_SENT)
  @javax.annotation.Nullable
  private BigDecimal timesSent;

  public static final String SERIALIZED_NAME_TIMES_FAILED = "timesFailed";
  @SerializedName(SERIALIZED_NAME_TIMES_FAILED)
  @javax.annotation.Nullable
  private BigDecimal timesFailed;

  public static final String SERIALIZED_NAME_LAST_NOTIFICATION = "lastNotification";
  @SerializedName(SERIALIZED_NAME_LAST_NOTIFICATION)
  @javax.annotation.Nullable
  private OffsetDateTime lastNotification;

  public static final String SERIALIZED_NAME_LAST_FAILURE = "lastFailure";
  @SerializedName(SERIALIZED_NAME_LAST_FAILURE)
  @javax.annotation.Nullable
  private OffsetDateTime lastFailure;

  public static final String SERIALIZED_NAME_LAST_SUCCESS = "lastSuccess";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESS)
  @javax.annotation.Nullable
  private OffsetDateTime lastSuccess;

  public NotificationParams() {
  }

  public NotificationParams attributes(@javax.annotation.Nullable List<String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public NotificationParams addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Entity Attribute Names (Properties or Relationships) to be included in the notification payload body. If undefined it will mean all Attributes. 
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<String> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable List<String> attributes) {
    this.attributes = attributes;
  }


  public NotificationParams sysAttrs(@javax.annotation.Nullable Boolean sysAttrs) {
    this.sysAttrs = sysAttrs;
    return this;
  }

  /**
   * If true, the system generated attributes createdAt and modifiedAt are included in the response payload body, in the case of a deletion also deletedAt. 
   * @return sysAttrs
   */
  @javax.annotation.Nullable
  public Boolean getSysAttrs() {
    return sysAttrs;
  }

  public void setSysAttrs(@javax.annotation.Nullable Boolean sysAttrs) {
    this.sysAttrs = sysAttrs;
  }


  public NotificationParams format(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Conveys the representation format of the entities delivered at notification time. By default, it will be in the normalized format. 
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
  }


  public NotificationParams showChanges(@javax.annotation.Nullable Boolean showChanges) {
    this.showChanges = showChanges;
    return this;
  }

  /**
   * If true the previous value (previousValue) of Properties or languageMap (previousLanguageMap) of Language Properties or object (previousObject) of Relationships is provided in addition to the current one. This requires that it exists, i.e. in case of modifications and deletions,  but not in the case of creations. showChanges cannot be true in case format is \&quot;keyValues\&quot;. 
   * @return showChanges
   */
  @javax.annotation.Nullable
  public Boolean getShowChanges() {
    return showChanges;
  }

  public void setShowChanges(@javax.annotation.Nullable Boolean showChanges) {
    this.showChanges = showChanges;
  }


  public NotificationParams endpoint(@javax.annotation.Nonnull Endpoint endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public Endpoint getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nonnull Endpoint endpoint) {
    this.endpoint = endpoint;
  }


  public NotificationParams status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the Notification. It shall be \&quot;ok\&quot; if the last attempt to notify the subscriber succeeded. It shall be \&quot;failed\&quot; if the last attempt to notify the subscriber failed. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public NotificationParams timesSent(@javax.annotation.Nullable BigDecimal timesSent) {
    this.timesSent = timesSent;
    return this;
  }

  /**
   * Number of times that the notification has been sent. Provided by the system when querying the details of a subscription. 
   * minimum: 1
   * @return timesSent
   */
  @javax.annotation.Nullable
  public BigDecimal getTimesSent() {
    return timesSent;
  }

  public void setTimesSent(@javax.annotation.Nullable BigDecimal timesSent) {
    this.timesSent = timesSent;
  }


  public NotificationParams timesFailed(@javax.annotation.Nullable BigDecimal timesFailed) {
    this.timesFailed = timesFailed;
    return this;
  }

  /**
   * Number of times an unsuccessful response (or timeout) has been received when deliverying the notification. Provided by the system when querying the details of a subscription. 
   * minimum: 1
   * @return timesFailed
   */
  @javax.annotation.Nullable
  public BigDecimal getTimesFailed() {
    return timesFailed;
  }

  public void setTimesFailed(@javax.annotation.Nullable BigDecimal timesFailed) {
    this.timesFailed = timesFailed;
  }


  public NotificationParams lastNotification(@javax.annotation.Nullable OffsetDateTime lastNotification) {
    this.lastNotification = lastNotification;
    return this;
  }

  /**
   * Timestamp corresponding to the instant when the last notification has been sent. Provided by the system when querying the details of a subscription. 
   * @return lastNotification
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastNotification() {
    return lastNotification;
  }

  public void setLastNotification(@javax.annotation.Nullable OffsetDateTime lastNotification) {
    this.lastNotification = lastNotification;
  }


  public NotificationParams lastFailure(@javax.annotation.Nullable OffsetDateTime lastFailure) {
    this.lastFailure = lastFailure;
    return this;
  }

  /**
   * Timestamp corresponding to the instant when the last notification resulting in failure (for instance, in the HTTP binding, an HTTP response code different than 200) has been sent. Provided by the system when querying the details of a subscription. 
   * @return lastFailure
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastFailure() {
    return lastFailure;
  }

  public void setLastFailure(@javax.annotation.Nullable OffsetDateTime lastFailure) {
    this.lastFailure = lastFailure;
  }


  public NotificationParams lastSuccess(@javax.annotation.Nullable OffsetDateTime lastSuccess) {
    this.lastSuccess = lastSuccess;
    return this;
  }

  /**
   * Timestamp corresponding to the instant when the last successful (200 OK response) notification has been sent. Provided by the system when querying the details of a subscription. 
   * @return lastSuccess
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccess() {
    return lastSuccess;
  }

  public void setLastSuccess(@javax.annotation.Nullable OffsetDateTime lastSuccess) {
    this.lastSuccess = lastSuccess;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NotificationParams instance itself
   */
  public NotificationParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationParams notificationParams = (NotificationParams) o;
    return Objects.equals(this.attributes, notificationParams.attributes) &&
        Objects.equals(this.sysAttrs, notificationParams.sysAttrs) &&
        Objects.equals(this.format, notificationParams.format) &&
        Objects.equals(this.showChanges, notificationParams.showChanges) &&
        Objects.equals(this.endpoint, notificationParams.endpoint) &&
        Objects.equals(this.status, notificationParams.status) &&
        Objects.equals(this.timesSent, notificationParams.timesSent) &&
        Objects.equals(this.timesFailed, notificationParams.timesFailed) &&
        Objects.equals(this.lastNotification, notificationParams.lastNotification) &&
        Objects.equals(this.lastFailure, notificationParams.lastFailure) &&
        Objects.equals(this.lastSuccess, notificationParams.lastSuccess)&&
        Objects.equals(this.additionalProperties, notificationParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, sysAttrs, format, showChanges, endpoint, status, timesSent, timesFailed, lastNotification, lastFailure, lastSuccess, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationParams {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    sysAttrs: ").append(toIndentedString(sysAttrs)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    showChanges: ").append(toIndentedString(showChanges)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timesSent: ").append(toIndentedString(timesSent)).append("\n");
    sb.append("    timesFailed: ").append(toIndentedString(timesFailed)).append("\n");
    sb.append("    lastNotification: ").append(toIndentedString(lastNotification)).append("\n");
    sb.append("    lastFailure: ").append(toIndentedString(lastFailure)).append("\n");
    sb.append("    lastSuccess: ").append(toIndentedString(lastSuccess)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("sysAttrs");
    openapiFields.add("format");
    openapiFields.add("showChanges");
    openapiFields.add("endpoint");
    openapiFields.add("status");
    openapiFields.add("timesSent");
    openapiFields.add("timesFailed");
    openapiFields.add("lastNotification");
    openapiFields.add("lastFailure");
    openapiFields.add("lastSuccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endpoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationParams is not found in the empty JSON string", NotificationParams.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationParams.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull() && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      // validate the required field `endpoint`
      Endpoint.validateJsonElement(jsonObj.get("endpoint"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationParams.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationParams>() {
           @Override
           public void write(JsonWriter out, NotificationParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             NotificationParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationParams
   * @throws IOException if the JSON string is invalid with respect to NotificationParams
   */
  public static NotificationParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationParams.class);
  }

  /**
   * Convert an instance of NotificationParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

