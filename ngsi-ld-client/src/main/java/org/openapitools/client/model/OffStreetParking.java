/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailableSpotNumber;
import org.openapitools.client.model.EntityScope;
import org.openapitools.client.model.GeoProperty;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.OperatedBy;
import org.openapitools.client.model.TotalSpotNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NGSI-LD Entity Type that represents a parking. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T11:21:26.751408096Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class OffStreetParking {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private URI id;

  /**
   * NGSI-LD Entity identifier. It has to be OffStreetParking.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    OFF_STREET_PARKING("OffStreetParking");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type = TypeEnum.OFF_STREET_PARKING;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  @javax.annotation.Nullable
  private EntityScope scope;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  @javax.annotation.Nullable
  private GeoProperty location;

  public static final String SERIALIZED_NAME_OBSERVATION_SPACE = "observationSpace";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_SPACE)
  @javax.annotation.Nullable
  private GeoProperty observationSpace;

  public static final String SERIALIZED_NAME_OPERATION_SPACE = "operationSpace";
  @SerializedName(SERIALIZED_NAME_OPERATION_SPACE)
  @javax.annotation.Nullable
  private GeoProperty operationSpace;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private Name name;

  public static final String SERIALIZED_NAME_AVAILABLE_SPOT_NUMBERS = "availableSpotNumbers";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SPOT_NUMBERS)
  @javax.annotation.Nullable
  private List<AvailableSpotNumber> availableSpotNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_SPOT_NUMBER = "totalSpotNumber";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPOT_NUMBER)
  @javax.annotation.Nullable
  private TotalSpotNumber totalSpotNumber;

  public static final String SERIALIZED_NAME_OPERATED_BY = "operatedBy";
  @SerializedName(SERIALIZED_NAME_OPERATED_BY)
  @javax.annotation.Nonnull
  private OperatedBy operatedBy;

  public OffStreetParking() {
  }

  public OffStreetParking id(@javax.annotation.Nullable URI id) {
    this.id = id;
    return this;
  }

  /**
   * Entity id. 
   * @return id
   */
  @javax.annotation.Nullable
  public URI getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable URI id) {
    this.id = id;
  }


  public OffStreetParking type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * NGSI-LD Entity identifier. It has to be OffStreetParking.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public OffStreetParking scope(@javax.annotation.Nullable EntityScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public EntityScope getScope() {
    return scope;
  }

  public void setScope(@javax.annotation.Nullable EntityScope scope) {
    this.scope = scope;
  }


  public OffStreetParking location(@javax.annotation.Nullable GeoProperty location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GeoProperty getLocation() {
    return location;
  }

  public void setLocation(@javax.annotation.Nullable GeoProperty location) {
    this.location = location;
  }


  public OffStreetParking observationSpace(@javax.annotation.Nullable GeoProperty observationSpace) {
    this.observationSpace = observationSpace;
    return this;
  }

  /**
   * Get observationSpace
   * @return observationSpace
   */
  @javax.annotation.Nullable
  public GeoProperty getObservationSpace() {
    return observationSpace;
  }

  public void setObservationSpace(@javax.annotation.Nullable GeoProperty observationSpace) {
    this.observationSpace = observationSpace;
  }


  public OffStreetParking operationSpace(@javax.annotation.Nullable GeoProperty operationSpace) {
    this.operationSpace = operationSpace;
    return this;
  }

  /**
   * Get operationSpace
   * @return operationSpace
   */
  @javax.annotation.Nullable
  public GeoProperty getOperationSpace() {
    return operationSpace;
  }

  public void setOperationSpace(@javax.annotation.Nullable GeoProperty operationSpace) {
    this.operationSpace = operationSpace;
  }


  public OffStreetParking createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was entered into an NGSI-LD system.  Entity creation timestamp. See clause 4.8. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OffStreetParking modifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was last modified in an NGSI-LD system, e.g. in order to correct a previously entered incorrect value.  Entity last modification timestamp. See clause 4.8. 
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(@javax.annotation.Nullable OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public OffStreetParking deletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * It is defined as the temporal Property at which the Entity, Property or Relationship was deleted from an NGSI-LD system.  Entity deletion timestamp. See clause 4.8. It is only used in notifications reporting deletions and in the Temporal Representation of Entities (clause 4.5.6), Properties (clause 4.5.7), Relationships (clause 4.5.8) and LanguageProperties (clause 5.2.32). 
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(@javax.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public OffStreetParking name(@javax.annotation.Nonnull Name name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public Name getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull Name name) {
    this.name = name;
  }


  public OffStreetParking availableSpotNumbers(@javax.annotation.Nullable List<AvailableSpotNumber> availableSpotNumbers) {
    this.availableSpotNumbers = availableSpotNumbers;
    return this;
  }

  public OffStreetParking addAvailableSpotNumbersItem(AvailableSpotNumber availableSpotNumbersItem) {
    if (this.availableSpotNumbers == null) {
      this.availableSpotNumbers = new ArrayList<>();
    }
    this.availableSpotNumbers.add(availableSpotNumbersItem);
    return this;
  }

  /**
   * Get availableSpotNumbers
   * @return availableSpotNumbers
   */
  @javax.annotation.Nullable
  public List<AvailableSpotNumber> getAvailableSpotNumbers() {
    return availableSpotNumbers;
  }

  public void setAvailableSpotNumbers(@javax.annotation.Nullable List<AvailableSpotNumber> availableSpotNumbers) {
    this.availableSpotNumbers = availableSpotNumbers;
  }


  public OffStreetParking totalSpotNumber(@javax.annotation.Nullable TotalSpotNumber totalSpotNumber) {
    this.totalSpotNumber = totalSpotNumber;
    return this;
  }

  /**
   * Get totalSpotNumber
   * @return totalSpotNumber
   */
  @javax.annotation.Nullable
  public TotalSpotNumber getTotalSpotNumber() {
    return totalSpotNumber;
  }

  public void setTotalSpotNumber(@javax.annotation.Nullable TotalSpotNumber totalSpotNumber) {
    this.totalSpotNumber = totalSpotNumber;
  }


  public OffStreetParking operatedBy(@javax.annotation.Nonnull OperatedBy operatedBy) {
    this.operatedBy = operatedBy;
    return this;
  }

  /**
   * Get operatedBy
   * @return operatedBy
   */
  @javax.annotation.Nonnull
  public OperatedBy getOperatedBy() {
    return operatedBy;
  }

  public void setOperatedBy(@javax.annotation.Nonnull OperatedBy operatedBy) {
    this.operatedBy = operatedBy;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OffStreetParking instance itself
   */
  public OffStreetParking putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OffStreetParking offStreetParking = (OffStreetParking) o;
    return Objects.equals(this.id, offStreetParking.id) &&
        Objects.equals(this.type, offStreetParking.type) &&
        Objects.equals(this.scope, offStreetParking.scope) &&
        Objects.equals(this.location, offStreetParking.location) &&
        Objects.equals(this.observationSpace, offStreetParking.observationSpace) &&
        Objects.equals(this.operationSpace, offStreetParking.operationSpace) &&
        Objects.equals(this.createdAt, offStreetParking.createdAt) &&
        Objects.equals(this.modifiedAt, offStreetParking.modifiedAt) &&
        Objects.equals(this.deletedAt, offStreetParking.deletedAt) &&
        Objects.equals(this.name, offStreetParking.name) &&
        Objects.equals(this.availableSpotNumbers, offStreetParking.availableSpotNumbers) &&
        Objects.equals(this.totalSpotNumber, offStreetParking.totalSpotNumber) &&
        Objects.equals(this.operatedBy, offStreetParking.operatedBy)&&
        Objects.equals(this.additionalProperties, offStreetParking.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, scope, location, observationSpace, operationSpace, createdAt, modifiedAt, deletedAt, name, availableSpotNumbers, totalSpotNumber, operatedBy, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OffStreetParking {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    observationSpace: ").append(toIndentedString(observationSpace)).append("\n");
    sb.append("    operationSpace: ").append(toIndentedString(operationSpace)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    availableSpotNumbers: ").append(toIndentedString(availableSpotNumbers)).append("\n");
    sb.append("    totalSpotNumber: ").append(toIndentedString(totalSpotNumber)).append("\n");
    sb.append("    operatedBy: ").append(toIndentedString(operatedBy)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("scope");
    openapiFields.add("location");
    openapiFields.add("observationSpace");
    openapiFields.add("operationSpace");
    openapiFields.add("createdAt");
    openapiFields.add("modifiedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("name");
    openapiFields.add("availableSpotNumbers");
    openapiFields.add("totalSpotNumber");
    openapiFields.add("operatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("operatedBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OffStreetParking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OffStreetParking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OffStreetParking is not found in the empty JSON string", OffStreetParking.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OffStreetParking.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        EntityScope.validateJsonElement(jsonObj.get("scope"));
      }
      // validate the required field `name`
      Name.validateJsonElement(jsonObj.get("name"));
      if (jsonObj.get("availableSpotNumbers") != null && !jsonObj.get("availableSpotNumbers").isJsonNull()) {
        JsonArray jsonArrayavailableSpotNumbers = jsonObj.getAsJsonArray("availableSpotNumbers");
        if (jsonArrayavailableSpotNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableSpotNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableSpotNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("availableSpotNumbers").toString()));
          }

          // validate the optional field `availableSpotNumbers` (array)
          for (int i = 0; i < jsonArrayavailableSpotNumbers.size(); i++) {
            AvailableSpotNumber.validateJsonElement(jsonArrayavailableSpotNumbers.get(i));
          };
        }
      }
      // validate the optional field `totalSpotNumber`
      if (jsonObj.get("totalSpotNumber") != null && !jsonObj.get("totalSpotNumber").isJsonNull()) {
        TotalSpotNumber.validateJsonElement(jsonObj.get("totalSpotNumber"));
      }
      // validate the required field `operatedBy`
      OperatedBy.validateJsonElement(jsonObj.get("operatedBy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OffStreetParking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OffStreetParking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OffStreetParking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OffStreetParking.class));

       return (TypeAdapter<T>) new TypeAdapter<OffStreetParking>() {
           @Override
           public void write(JsonWriter out, OffStreetParking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OffStreetParking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OffStreetParking instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OffStreetParking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OffStreetParking
   * @throws IOException if the JSON string is invalid with respect to OffStreetParking
   */
  public static OffStreetParking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OffStreetParking.class);
  }

  /**
   * Convert an instance of OffStreetParking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

