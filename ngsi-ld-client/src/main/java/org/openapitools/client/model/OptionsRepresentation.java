/*
 * NGSI-LD OAS
 * OpenAPI Specification for NGSI-LD API.
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * 6.3.7 Representation of Entities.   When its value includes the keyword \&quot;normalized\&quot;, a normalized representation of Entities shall be provided as defined by clause 4.5.1, with Attributes returned in the normalized representation as defined in clauses 4.5.2.2, 4.5.3.2 and 4.5.18.2.  When its value includes the keyword \&quot;concise\&quot;, a concise lossless representation of Entities shall be provided as defined by clause 4.5.1. with Attributes returned in the concise representation as defined in clauses 4.5.2.3, 4.5.3.3 and 4.5.18.3. In this case the broker will return data in the most concise lossless representation possible, for example removing all Attribute \&quot;type\&quot; members.  When its value includes the keyword \&quot;keyValues\&quot; (or \&quot;simplified\&quot; as a synonym), a simplified representation of Entities shall be provided as defined by clause 4.5.4.  If the Accept Header is set to \&quot;application/geo+json\&quot; the response will be in simplified GeoJSON format as defined by clause 4.5.17. 
 */
@JsonAdapter(OptionsRepresentation.Adapter.class)
public enum OptionsRepresentation {
  
  NORMALIZED("normalized"),
  
  CONCISE("concise"),
  
  KEY_VALUES("keyValues"),
  
  SIMPLIFIED("simplified");

  private String value;

  OptionsRepresentation(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OptionsRepresentation fromValue(String value) {
    for (OptionsRepresentation b : OptionsRepresentation.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OptionsRepresentation> {
    @Override
    public void write(final JsonWriter jsonWriter, final OptionsRepresentation enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OptionsRepresentation read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OptionsRepresentation.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OptionsRepresentation.fromValue(value);
  }
}

